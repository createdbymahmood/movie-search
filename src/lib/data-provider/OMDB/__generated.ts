/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * OMDb API
 * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)
 * OpenAPI spec version: 1.0
 */
import {useQuery} from '@tanstack/react-query'
import type {
    QueryFunction,
    QueryKey,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query'
import {OMDBAxiosInstance} from '../../axios'
import type {ErrorType} from '../../axios'
export type TitleSearchR = (typeof TitleSearchR)[keyof typeof TitleSearchR]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TitleSearchR = {
    json: 'json',
    xml: 'xml',
} as const

export type TitleSearchType =
    (typeof TitleSearchType)[keyof typeof TitleSearchType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TitleSearchType = {
    movie: 'movie',
    series: 'series',
} as const

export type TitleSearchParams = {
    /**
     * Title of movie or series
     */
    s: string
    /**
     * Year of release
     */
    y?: number
    /**
     * Return movie or series
     */
    type?: TitleSearchType
    /**
     * The response type to return
     */
    r?: TitleSearchR
    /**
     * Page number to return
     */
    page?: number
    /**
     * JSONP callback name
     */
    callback?: string
}

export type GetIdR = (typeof GetIdR)[keyof typeof GetIdR]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIdR = {
    json: 'json',
    xml: 'xml',
} as const

export type GetIdPlot = (typeof GetIdPlot)[keyof typeof GetIdPlot]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIdPlot = {
    short: 'short',
    full: 'full',
} as const

export type GetIdParams = {
    /**
     * A valid IMDb ID (e.g. tt0000001)
     */
    i: string
    /**
     * Return short or full plot
     */
    plot?: GetIdPlot
    /**
     * The response type to return
     */
    r?: GetIdR
    /**
     * JSONP callback name
     */
    callback?: string
}

export type GetTitleR = (typeof GetTitleR)[keyof typeof GetTitleR]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTitleR = {
    json: 'json',
    xml: 'xml',
} as const

export type GetTitlePlot = (typeof GetTitlePlot)[keyof typeof GetTitlePlot]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTitlePlot = {
    short: 'short',
    full: 'full',
} as const

export type GetTitleType = (typeof GetTitleType)[keyof typeof GetTitleType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTitleType = {
    movie: 'movie',
    series: 'series',
} as const

export type GetTitleParams = {
    /**
     * Title of movie or series
     */
    t: string
    /**
     * Year of release
     */
    y?: number
    /**
     * Return movie or series
     */
    type?: GetTitleType
    /**
     * Return short or full plot
     */
    plot?: GetTitlePlot
    /**
     * The response type to return
     */
    r?: GetTitleR
    /**
     * JSONP callback name
     */
    callback?: string
}

/**
 * @summary Returns the most popular match for a given title
 */
export const getTitle = (params: GetTitleParams, signal?: AbortSignal) => {
    return OMDBAxiosInstance<void>({url: `/?t`, method: 'GET', params, signal})
}

export const getGetTitleQueryKey = (params: GetTitleParams) => {
    return [`/?t`, ...(params ? [params] : [])] as const
}

export const getGetTitleQueryOptions = <
    TData = Awaited<ReturnType<typeof getTitle>>,
    TError = ErrorType<unknown>,
>(
    params: GetTitleParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getTitle>>, TError, TData>
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTitleQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTitle>>> = ({
        signal,
    }) => getTitle(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTitle>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTitleQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTitle>>
>
export type GetTitleQueryError = ErrorType<unknown>

/**
 * @summary Returns the most popular match for a given title
 */
export const useGetTitle = <
    TData = Awaited<ReturnType<typeof getTitle>>,
    TError = ErrorType<unknown>,
>(
    params: GetTitleParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getTitle>>, TError, TData>
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTitleQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Returns a single result based on the ID provided
 */
export const getId = (params: GetIdParams, signal?: AbortSignal) => {
    return OMDBAxiosInstance<void>({url: `/?i`, method: 'GET', params, signal})
}

export const getGetIdQueryKey = (params: GetIdParams) => {
    return [`/?i`, ...(params ? [params] : [])] as const
}

export const getGetIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getId>>,
    TError = ErrorType<unknown>,
>(
    params: GetIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetIdQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getId>>> = ({
        signal,
    }) => getId(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getId>>>
export type GetIdQueryError = ErrorType<unknown>

/**
 * @summary Returns a single result based on the ID provided
 */
export const useGetId = <
    TData = Awaited<ReturnType<typeof getId>>,
    TError = ErrorType<unknown>,
>(
    params: GetIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetIdQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Returns an array of results for a given title
 */
export const titleSearch = (
    params: TitleSearchParams,
    signal?: AbortSignal,
) => {
    return OMDBAxiosInstance<void>({url: `/?s`, method: 'GET', params, signal})
}

export const getTitleSearchQueryKey = (params: TitleSearchParams) => {
    return [`/?s`, ...(params ? [params] : [])] as const
}

export const getTitleSearchQueryOptions = <
    TData = Awaited<ReturnType<typeof titleSearch>>,
    TError = ErrorType<unknown>,
>(
    params: TitleSearchParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof titleSearch>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getTitleSearchQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof titleSearch>>> = ({
        signal,
    }) => titleSearch(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof titleSearch>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type TitleSearchQueryResult = NonNullable<
    Awaited<ReturnType<typeof titleSearch>>
>
export type TitleSearchQueryError = ErrorType<unknown>

/**
 * @summary Returns an array of results for a given title
 */
export const useTitleSearch = <
    TData = Awaited<ReturnType<typeof titleSearch>>,
    TError = ErrorType<unknown>,
>(
    params: TitleSearchParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof titleSearch>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getTitleSearchQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}
