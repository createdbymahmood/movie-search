/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * TMDB API documentation
 * ## Get started
> This collection was generated from TMDB API OpenAPI specification file available in the [official API documentation](https://developers.themoviedb.org/3/getting-started/introduction).
- Get your own API key from TMDB
- Replace `your-tmdb-api-key` placeholder text with your own API key under the collection variable called `api_key`. This will update the query parameter submitted with each API call to authenticate and authorize your requests.

## Welcome

This is a place to put general notes and extra information, for internal use.

To get started designing/documenting this API, select a version on the left. # Title
No Description
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from '@tanstack/react-query'
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query'
import {TMDBInstance} from '../../axios'
import type {ErrorType} from '../../axios'
export type GetFindExternalId404 = {[key: string]: any}

export type GetFindExternalId401 = {[key: string]: any}

export type GetFindExternalId200 = {[key: string]: any}

export type GetFindExternalIdParams = {
    /**
     * (Required)
     */
    external_source?: string
}

export type GetCreditCreditId404 = {[key: string]: any}

export type GetCreditCreditId401 = {[key: string]: any}

export type GetCreditCreditId200 = {[key: string]: any}

export type GetReviewReviewId404 = {[key: string]: any}

export type GetReviewReviewId401 = {[key: string]: any}

export type GetReviewReviewId200 = {[key: string]: any}

export type GetTrendingMediaTypeTimeWindow404 = {[key: string]: any}

export type GetTrendingMediaTypeTimeWindow401 = {[key: string]: any}

export type GetTrendingMediaTypeTimeWindow200 = {[key: string]: any}

export type GetGenreTvList404 = {[key: string]: any}

export type GetGenreTvList401 = {[key: string]: any}

export type GetGenreTvList200 = {[key: string]: any}

export type GetGenreMovieList404 = {[key: string]: any}

export type GetGenreMovieList401 = {[key: string]: any}

export type GetGenreMovieList200 = {[key: string]: any}

export type GetGenreMovieListParams = {
    language?: string
}

export type GetCollectionCollectionIdTranslations404 = {[key: string]: any}

export type GetCollectionCollectionIdTranslations401 = {[key: string]: any}

export type GetCollectionCollectionIdTranslations200 = {[key: string]: any}

export type GetCollectionCollectionIdImages404 = {[key: string]: any}

export type GetCollectionCollectionIdImages401 = {[key: string]: any}

export type GetCollectionCollectionIdImages200 = {[key: string]: any}

export type GetCollectionCollectionId404 = {[key: string]: any}

export type GetCollectionCollectionId401 = {[key: string]: any}

export type GetCollectionCollectionId200 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedMovies404 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedMovies401 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedMovies200 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedTvEpisodes404 = {
    [key: string]: any
}

export type GetGuestSessionGuestSessionIdRatedTvEpisodes401 = {
    [key: string]: any
}

export type GetGuestSessionGuestSessionIdRatedTvEpisodes200 = {
    [key: string]: any
}

export type GetGuestSessionGuestSessionIdRatedTv404 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedTv401 = {[key: string]: any}

export type GetGuestSessionGuestSessionIdRatedTv200 = {[key: string]: any}

export type GetWatchProvidersMovie404 = {[key: string]: any}

export type GetWatchProvidersMovie401 = {[key: string]: any}

export type GetWatchProvidersMovie200 = {[key: string]: any}

export type GetWatchProvidersMovieParams = {
    /**
     * Use the ISO-3166-1 code to filter the providers that are available in a particular country.
     */
    watch_region?: string
}

export type GetWatchProvidersTv404 = {[key: string]: any}

export type GetWatchProvidersTv401 = {[key: string]: any}

export type GetWatchProvidersTv200 = {[key: string]: any}

export type GetWatchProvidersTvParams = {
    /**
     * Use the ISO-3166-1 code to filter the providers that are available in a particular country.
     */
    watch_region?: string
}

export type GetWatchProvidersRegions404 = {[key: string]: any}

export type GetWatchProvidersRegions401 = {[key: string]: any}

export type GetWatchProvidersRegions200 = {[key: string]: any}

export type GetCertificationTvList404 = {[key: string]: any}

export type GetCertificationTvList401 = {[key: string]: any}

export type GetCertificationTvList200 = {[key: string]: any}

export type GetCertificationMovieList404 = {[key: string]: any}

export type GetCertificationMovieList401 = {[key: string]: any}

export type GetCertificationMovieList200 = {[key: string]: any}

export type GetNetworkNetworkIdImages404 = {[key: string]: any}

export type GetNetworkNetworkIdImages401 = {[key: string]: any}

export type GetNetworkNetworkIdImages200 = {[key: string]: any}

export type GetNetworkNetworkIdAlternativeNames404 = {[key: string]: any}

export type GetNetworkNetworkIdAlternativeNames401 = {[key: string]: any}

export type GetNetworkNetworkIdAlternativeNames200 = {[key: string]: any}

export type GetNetworkNetworkId404 = {[key: string]: any}

export type GetNetworkNetworkId401 = {[key: string]: any}

export type GetNetworkNetworkId200 = {[key: string]: any}

export type GetKeywordKeywordIdMovies404 = {[key: string]: any}

export type GetKeywordKeywordIdMovies401 = {[key: string]: any}

export type GetKeywordKeywordIdMovies200 = {[key: string]: any}

export type GetKeywordKeywordId404 = {[key: string]: any}

export type GetKeywordKeywordId401 = {[key: string]: any}

export type GetKeywordKeywordId200 = {[key: string]: any}

export type GetPersonPopular404 = {[key: string]: any}

export type GetPersonPopular401 = {[key: string]: any}

export type GetPersonPopular200 = {[key: string]: any}

export type GetPersonChanges404 = {[key: string]: any}

export type GetPersonChanges401 = {[key: string]: any}

export type GetPersonChanges200 = {[key: string]: any}

export type GetPersonLatest404 = {[key: string]: any}

export type GetPersonLatest401 = {[key: string]: any}

export type GetPersonLatest200 = {[key: string]: any}

export type GetPersonPersonIdImages404 = {[key: string]: any}

export type GetPersonPersonIdImages401 = {[key: string]: any}

export type GetPersonPersonIdImages200 = {[key: string]: any}

export type GetPersonPersonIdTaggedImages404 = {[key: string]: any}

export type GetPersonPersonIdTaggedImages401 = {[key: string]: any}

export type GetPersonPersonIdTaggedImages200 = {[key: string]: any}

export type GetPersonPersonIdTranslations404 = {[key: string]: any}

export type GetPersonPersonIdTranslations401 = {[key: string]: any}

export type GetPersonPersonIdTranslations200 = {[key: string]: any}

export type GetPersonPersonIdMovieCredits404 = {[key: string]: any}

export type GetPersonPersonIdMovieCredits401 = {[key: string]: any}

export type GetPersonPersonIdMovieCredits200 = {[key: string]: any}

export type GetPersonPersonIdTvCredits404 = {[key: string]: any}

export type GetPersonPersonIdTvCredits401 = {[key: string]: any}

export type GetPersonPersonIdTvCredits200 = {[key: string]: any}

export type GetPersonPersonIdChanges404 = {[key: string]: any}

export type GetPersonPersonIdChanges401 = {[key: string]: any}

export type GetPersonPersonIdChanges200 = {[key: string]: any}

export type GetPersonPersonIdCombinedCredits404 = {[key: string]: any}

export type GetPersonPersonIdCombinedCredits401 = {[key: string]: any}

export type GetPersonPersonIdCombinedCredits200 = {[key: string]: any}

export type GetPersonPersonIdExternalIds404 = {[key: string]: any}

export type GetPersonPersonIdExternalIds401 = {[key: string]: any}

export type GetPersonPersonIdExternalIds200 = {[key: string]: any}

export type GetPersonPersonId404 = {[key: string]: any}

export type GetPersonPersonId401 = {[key: string]: any}

export type GetPersonPersonId200 = {[key: string]: any}

export type GetAccount404 = {[key: string]: any}

export type GetAccount401 = {[key: string]: any}

export type GetAccount200 = {[key: string]: any}

export type GetAccountParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdLists404 = {[key: string]: any}

export type GetAccountAccountIdLists401 = {[key: string]: any}

export type GetAccountAccountIdLists200 = {[key: string]: any}

export type GetAccountAccountIdListsParams = {
    api_key?: string
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdRatedMovies404 = {[key: string]: any}

export type GetAccountAccountIdRatedMovies401 = {[key: string]: any}

export type GetAccountAccountIdRatedMovies200 = {[key: string]: any}

export type GetAccountAccountIdRatedMoviesParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdRatedTvEpisodes404 = {[key: string]: any}

export type GetAccountAccountIdRatedTvEpisodes401 = {[key: string]: any}

export type GetAccountAccountIdRatedTvEpisodes200 = {[key: string]: any}

export type GetAccountAccountIdRatedTvEpisodesParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdRatedTv404 = {[key: string]: any}

export type GetAccountAccountIdRatedTv401 = {[key: string]: any}

export type GetAccountAccountIdRatedTv200 = {[key: string]: any}

export type GetAccountAccountIdRatedTvParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdFavoriteMovies404 = {[key: string]: any}

export type GetAccountAccountIdFavoriteMovies401 = {[key: string]: any}

export type GetAccountAccountIdFavoriteMovies200 = {[key: string]: any}

export type GetAccountAccountIdFavoriteMoviesParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdFavoriteTv404 = {[key: string]: any}

export type GetAccountAccountIdFavoriteTv401 = {[key: string]: any}

export type GetAccountAccountIdFavoriteTv200 = {[key: string]: any}

export type GetAccountAccountIdFavoriteTvParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type PostAccountAccountIdFavorite404 = {[key: string]: any}

export type PostAccountAccountIdFavorite401 = {[key: string]: any}

export type PostAccountAccountIdFavorite201 = {[key: string]: any}

export type PostAccountAccountIdFavoriteParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdWatchlistMovies404 = {[key: string]: any}

export type GetAccountAccountIdWatchlistMovies401 = {[key: string]: any}

export type GetAccountAccountIdWatchlistMovies200 = {[key: string]: any}

export type GetAccountAccountIdWatchlistMoviesParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetAccountAccountIdWatchlistTv404 = {[key: string]: any}

export type GetAccountAccountIdWatchlistTv401 = {[key: string]: any}

export type GetAccountAccountIdWatchlistTv200 = {[key: string]: any}

export type GetAccountAccountIdWatchlistTvParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type PostAccountAccountIdWatchlist404 = {[key: string]: any}

export type PostAccountAccountIdWatchlist401 = {[key: string]: any}

export type PostAccountAccountIdWatchlist201 = {[key: string]: any}

export type PostAccountAccountIdWatchlistParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetSearchMulti404 = {[key: string]: any}

export type GetSearchMulti401 = {[key: string]: any}

export type GetSearchMulti200 = {[key: string]: any}

export type GetSearchMovie404 = {[key: string]: any}

export type GetSearchMovie401 = {[key: string]: any}

export type GetSearchMovie200 = {[key: string]: any}

export type GetSearchMovieParams = {
    year?: number
    primary_release_year?: number
}

export type GetSearchTv404 = {[key: string]: any}

export type GetSearchTv401 = {[key: string]: any}

export type GetSearchTv200 = {[key: string]: any}

export type GetSearchTvParams = {
    first_air_date_year?: number
}

export type GetSearchCompany404 = {[key: string]: any}

export type GetSearchCompany401 = {[key: string]: any}

export type GetSearchCompany200 = {[key: string]: any}

export type GetSearchCollection404 = {[key: string]: any}

export type GetSearchCollection401 = {[key: string]: any}

export type GetSearchCollection200 = {[key: string]: any}

export type GetSearchPerson404 = {[key: string]: any}

export type GetSearchPerson401 = {[key: string]: any}

export type GetSearchPerson200 = {[key: string]: any}

export type GetSearchKeyword404 = {[key: string]: any}

export type GetSearchKeyword401 = {[key: string]: any}

export type GetSearchKeyword200 = {[key: string]: any}

export type GetCompanyCompanyIdAlternativeNames404 = {[key: string]: any}

export type GetCompanyCompanyIdAlternativeNames401 = {[key: string]: any}

export type GetCompanyCompanyIdAlternativeNames200 = {[key: string]: any}

export type GetCompanyCompanyIdImages404 = {[key: string]: any}

export type GetCompanyCompanyIdImages401 = {[key: string]: any}

export type GetCompanyCompanyIdImages200 = {[key: string]: any}

export type GetCompanyCompanyId404 = {[key: string]: any}

export type GetCompanyCompanyId401 = {[key: string]: any}

export type GetCompanyCompanyId200 = {[key: string]: any}

export type GetConfigurationLanguages200 = {[key: string]: any}

export type GetConfigurationLanguagesParams = {
    api_key?: string
}

export type GetConfigurationPrimaryTranslations200 = {[key: string]: any}

export type GetConfigurationPrimaryTranslationsParams = {
    api_key?: string
}

export type GetConfigurationCountries200 = {[key: string]: any}

export type GetConfigurationCountriesParams = {
    api_key?: string
}

export type GetConfigurationTimezones200 = {[key: string]: any}

export type GetConfigurationTimezonesParams = {
    api_key?: string
}

export type GetConfigurationJobs200 = {[key: string]: any}

export type GetConfigurationJobsParams = {
    api_key?: string
}

export type GetConfiguration200 = {[key: string]: any}

export type GetConfigurationParams = {
    api_key?: string
}

export type GetMovieChanges404 = {[key: string]: any}

export type GetMovieChanges401 = {[key: string]: any}

export type GetMovieChanges200 = {[key: string]: any}

export type GetMovieTopRated404 = {[key: string]: any}

export type GetMovieTopRated401 = {[key: string]: any}

export type GetMovieTopRated200 = {[key: string]: any}

export type GetMovieLatest404 = {[key: string]: any}

export type GetMovieLatest401 = {[key: string]: any}

export type GetMovieLatest200 = {[key: string]: any}

export type GetMovieUpcoming404 = {[key: string]: any}

export type GetMovieUpcoming401 = {[key: string]: any}

export type GetMovieUpcoming200 = {[key: string]: any}

export type GetMoviePopular404 = {[key: string]: any}

export type GetMoviePopular401 = {[key: string]: any}

export type GetMoviePopular200 = {[key: string]: any}

export type GetMovieNowPlaying404 = {[key: string]: any}

export type GetMovieNowPlaying401 = {[key: string]: any}

export type GetMovieNowPlaying200 = {[key: string]: any}

export type GetMovieMovieIdImages404 = {[key: string]: any}

export type GetMovieMovieIdImages401 = {[key: string]: any}

export type GetMovieMovieIdImages200 = {[key: string]: any}

export type GetMovieMovieIdImagesParams = {
    include_image_language?: string
}

export type GetMovieMovieIdCredits404 = {[key: string]: any}

export type GetMovieMovieIdCredits401 = {[key: string]: any}

export type GetMovieMovieIdCredits200 = {[key: string]: any}

export type GetMovieMovieIdReviews404 = {[key: string]: any}

export type GetMovieMovieIdReviews401 = {[key: string]: any}

export type GetMovieMovieIdReviews200 = {[key: string]: any}

export type GetMovieMovieIdReviewsParams = {
    api_key?: string
}

export type GetMovieMovieIdReleaseDates404 = {[key: string]: any}

export type GetMovieMovieIdReleaseDates401 = {[key: string]: any}

export type GetMovieMovieIdReleaseDates200 = {[key: string]: any}

export type GetMovieMovieIdReleaseDatesParams = {
    api_key?: string
}

export type GetMovieMovieIdKeywords404 = {[key: string]: any}

export type GetMovieMovieIdKeywords401 = {[key: string]: any}

export type GetMovieMovieIdKeywords200 = {[key: string]: any}

export type GetMovieMovieIdKeywordsParams = {
    api_key?: string
}

export type GetMovieMovieIdWatchProviders404 = {[key: string]: any}

export type GetMovieMovieIdWatchProviders401 = {[key: string]: any}

export type GetMovieMovieIdWatchProviders200 = {[key: string]: any}

export type GetMovieMovieIdWatchProvidersParams = {
    api_key?: string
}

export type GetMovieMovieIdRecommendations404 = {[key: string]: any}

export type GetMovieMovieIdRecommendations401 = {[key: string]: any}

export type GetMovieMovieIdRecommendations200 = {[key: string]: any}

export type GetMovieMovieIdRecommendationsParams = {
    api_key?: string
}

export type GetMovieMovieIdSimilar404 = {[key: string]: any}

export type GetMovieMovieIdSimilar401 = {[key: string]: any}

export type GetMovieMovieIdSimilar200 = {[key: string]: any}

export type GetMovieMovieIdSimilarParams = {
    api_key?: string
}

export type GetMovieMovieIdLists404 = {[key: string]: any}

export type GetMovieMovieIdLists401 = {[key: string]: any}

export type GetMovieMovieIdLists200 = {[key: string]: any}

export type GetMovieMovieIdListsParams = {
    api_key?: string
}

export type GetMovieMovieIdAccountStates404 = {[key: string]: any}

export type GetMovieMovieIdAccountStates401 = {[key: string]: any}

export type GetMovieMovieIdAccountStates200 = {[key: string]: any}

export type GetMovieMovieIdAccountStatesParams = {
    /**
     * (Required)
     */
    session_id?: string
    guest_session_id?: string
}

export type GetMovieMovieIdVideos404 = {[key: string]: any}

export type GetMovieMovieIdVideos401 = {[key: string]: any}

export type GetMovieMovieIdVideos200 = {[key: string]: any}

export type GetMovieMovieIdVideosParams = {
    api_key?: string
}

export type GetMovieMovieIdAlternativeTitles404 = {[key: string]: any}

export type GetMovieMovieIdAlternativeTitles401 = {[key: string]: any}

export type GetMovieMovieIdAlternativeTitles200 = {[key: string]: any}

export type GetMovieMovieIdAlternativeTitlesParams = {
    country?: string
}

export type GetMovieMovieIdChanges404 = {[key: string]: any}

export type GetMovieMovieIdChanges401 = {[key: string]: any}

export type GetMovieMovieIdChanges200 = {[key: string]: any}

export type GetMovieMovieIdExternalIds404 = {[key: string]: any}

export type GetMovieMovieIdExternalIds401 = {[key: string]: any}

export type GetMovieMovieIdExternalIds200 = {[key: string]: any}

export type GetMovieMovieIdExternalIdsParams = {
    api_key?: string
}

export type GetMovieMovieIdTranslations404 = {[key: string]: any}

export type GetMovieMovieIdTranslations401 = {[key: string]: any}

export type GetMovieMovieIdTranslations200 = {[key: string]: any}

export type GetMovieMovieIdTranslationsParams = {
    api_key?: string
}

export type GetMovieMovieId404 = {[key: string]: any}

export type GetMovieMovieId401 = {[key: string]: any}

export type GetMovieMovieId200 = {[key: string]: any}

export type DeleteMovieMovieIdRating401 = {[key: string]: any}

export type DeleteMovieMovieIdRating200 = {[key: string]: any}

export type DeleteMovieMovieIdRatingParams = {
    guest_session_id?: string
    session_id?: string
}

export type PostMovieMovieIdRating404 = {[key: string]: any}

export type PostMovieMovieIdRating401 = {[key: string]: any}

export type PostMovieMovieIdRating201 = {[key: string]: any}

export type PostMovieMovieIdRatingParams = {
    guest_session_id?: string
    session_id?: string
}

export type PostList404 = {[key: string]: any}

export type PostList401 = {[key: string]: any}

export type PostList201 = {[key: string]: any}

export type PostListParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetListListIdItemStatus404 = {[key: string]: any}

export type GetListListIdItemStatus401 = {[key: string]: any}

export type GetListListIdItemStatus200 = {[key: string]: any}

export type GetListListIdItemStatusParams = {
    /**
     * (Required)
     */
    movie_id?: number
}

export type PostListListIdClear404 = {[key: string]: any}

export type PostListListIdClear401 = {[key: string]: any}

export type PostListListIdClear201 = {[key: string]: any}

export type PostListListIdClearParams = {
    /**
     * (Required)
     */
    confirm?: boolean
    /**
     * (Required)
     */
    session_id?: string
}

export type PostListListIdRemoveItem404 = {[key: string]: any}

export type PostListListIdRemoveItem401 = {[key: string]: any}

export type PostListListIdRemoveItem200 = {[key: string]: any}

export type PostListListIdRemoveItemParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type PostListListIdAddItem404 = {[key: string]: any}

export type PostListListIdAddItem401 = {[key: string]: any}

export type PostListListIdAddItem201 = {[key: string]: any}

export type PostListListIdAddItemParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type DeleteListListId404 = {[key: string]: any}

export type DeleteListListId401 = {[key: string]: any}

export type DeleteListListId201 = {[key: string]: any}

export type DeleteListListIdParams = {
    /**
     * (Required)
     */
    session_id?: string
}

export type GetListListId404 = {[key: string]: any}

export type GetListListId401 = {[key: string]: any}

export type GetListListId200 = {[key: string]: any}

export type GetAuthenticationGuestSessionNew404 = {[key: string]: any}

export type GetAuthenticationGuestSessionNew401 = {[key: string]: any}

export type GetAuthenticationGuestSessionNew200 = {[key: string]: any}

export type PostAuthenticationTokenValidateWithLogin404 = {[key: string]: any}

export type PostAuthenticationTokenValidateWithLogin401 = {[key: string]: any}

export type PostAuthenticationTokenValidateWithLogin200 = {[key: string]: any}

export type GetAuthenticationTokenNew404 = {[key: string]: any}

export type GetAuthenticationTokenNew401 = {[key: string]: any}

export type GetAuthenticationTokenNew200 = {[key: string]: any}

export type PostAuthenticationSessionConvert4404 = {[key: string]: any}

export type PostAuthenticationSessionConvert4401 = {[key: string]: any}

export type PostAuthenticationSessionConvert4200 = {[key: string]: any}

export type PostAuthenticationSessionNew404 = {[key: string]: any}

export type PostAuthenticationSessionNew401 = {[key: string]: any}

export type PostAuthenticationSessionNew200 = {[key: string]: any}

export type DeleteAuthenticationSession404 = {[key: string]: any}

export type DeleteAuthenticationSession401 = {[key: string]: any}

export type DeleteAuthenticationSession200 = {[key: string]: any}

export type GetDiscoverMovie404 = {[key: string]: any}

export type GetDiscoverMovie401 = {[key: string]: any}

export type GetDiscoverMovie200 = {[key: string]: any}

export type GetDiscoverMovieParams = {
    /**
     * Choose from one of the many available sort options.
     */
    sort_by?: string
    /**
     * Specify a language to query translatable fields with.
     */
    language?: string
    /**
     * Specify the page of results to query.
     */
    page?: number
    /**
     * Filter and only include movies that have a rating that is greater or equal to the specified value.
     */
    'vote_average.gte'?: number
    /**
     * Comma separated value of genre ids that you want to include in the results.
     */
    with_genres?: number
}

export type GetDiscoverTv404 = {[key: string]: any}

export type GetDiscoverTv401 = {[key: string]: any}

export type GetDiscoverTv200 = {[key: string]: any}

export type GetDiscoverTvParams = {
    /**
     * Choose from one of the many available sort options.
     */
    sort_by?: string
    /**
     * Filter and only include TV shows that have a air date (by looking at all episodes) that is greater or equal to the specified value.
     */
    'air_date.gte'?: string
    /**
     * Filter and only include TV shows that have a air date (by looking at all episodes) that is less than or equal to the specified value.
     */
    'air_date.lte'?: string
    /**
     * Filter and only include TV shows that have a original air date that is greater or equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date.
     */
    'first_air_date.gte'?: string
    /**
     * Filter and only include TV shows that have a original air date that is less than or equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date.
     */
    'first_air_date.lte'?: string
    /**
     * Filter and only include TV shows that have a original air date year that equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date.
     */
    first_air_date_year?: number
    /**
     * Specify a language to query translatable fields with.
     */
    language?: string
    /**
     * Specify the page of results to query.
     */
    page?: number
    /**
     * Used in conjunction with the air_date.gte/lte filter to calculate the proper UTC offset.
     */
    timezone?: string
    /**
     * Filter and only include movies that have a rating that is greater or equal to the specified value.
     */
    'vote_average.gte'?: number
    /**
     * Filter and only include movies that have a rating that is less than or equal to the specified value.
     */
    'vote_count.gte'?: number
    /**
     * Comma separated value of genre ids that you want to include in the results.
     */
    with_genres?: string
    /**
     * Comma separated value of network ids that you want to include in the results.
     */
    with_networks?: string
    /**
     * Comma separated value of genre ids that you want to exclude from the results.
     */
    without_genres?: string
    /**
     * Filter and only include TV shows with an episode runtime that is greater than or equal to a value.
     */
    'with_runtime.gte'?: number
    /**
     * Filter and only include TV shows with an episode runtime that is less than or equal to a value.
     */
    'with_runtime.lte'?: number
    /**
     * Use this filter to include TV shows that don't have an air date while using any of the "first_air_date" filters.
     */
    include_null_first_air_dates?: boolean
    /**
     * Specify an ISO 639-1 string to filter results by their original language value.
     */
    with_original_language?: string
    /**
     * Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic.
     */
    without_keywords?: string
    /**
     * Filter results to include items that have been screened theatrically.
     */
    screened_theatrically?: boolean
    /**
     * A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company.
     */
    with_companies?: string
    /**
     * A comma separated list of keyword ID's. Only includes TV shows that have one of the ID's added as a keyword.
     */
    with_keywords?: string
    /**
     * A comma or pipe separated list of watch provider ID's. Combine this filter with `watch_region` in order to filter your results by a specific watch provider in a specific region.
     */
    with_watch_providers?: string
    /**
     * An ISO 3166-1 code. Combine this filter with `with_watch_providers` in order to filter your results by a specific watch provider in a specific region.
     */
    watch_region?: string
    /**
     * In combination with `watch_region`, you can filter by monetization type.
     */
    with_watch_monetization_types?: string
}

export type GetTvEpisodeEpisodeIdChanges404 = {[key: string]: any}

export type GetTvEpisodeEpisodeIdChanges401 = {[key: string]: any}

export type GetTvEpisodeEpisodeIdChanges200 = {[key: string]: any}

export type GetTvAiringToday404 = {[key: string]: any}

export type GetTvAiringToday401 = {[key: string]: any}

export type GetTvAiringToday200 = {[key: string]: any}

export type GetTvSeasonSeasonIdChanges404 = {[key: string]: any}

export type GetTvSeasonSeasonIdChanges401 = {[key: string]: any}

export type GetTvSeasonSeasonIdChanges200 = {[key: string]: any}

export type GetTvOnTheAir404 = {[key: string]: any}

export type GetTvOnTheAir401 = {[key: string]: any}

export type GetTvOnTheAir200 = {[key: string]: any}

export type GetTvPopular404 = {[key: string]: any}

export type GetTvPopular401 = {[key: string]: any}

export type GetTvPopular200 = {[key: string]: any}

export type GetTvEpisodeGroupId404 = {[key: string]: any}

export type GetTvEpisodeGroupId401 = {[key: string]: any}

export type GetTvEpisodeGroupId200 = {[key: string]: any}

export type GetTvChanges404 = {[key: string]: any}

export type GetTvChanges401 = {[key: string]: any}

export type GetTvChanges200 = {[key: string]: any}

export type GetTvLatest404 = {[key: string]: any}

export type GetTvLatest401 = {[key: string]: any}

export type GetTvLatest200 = {[key: string]: any}

export type GetTvTopRated404 = {[key: string]: any}

export type GetTvTopRated401 = {[key: string]: any}

export type GetTvTopRated200 = {[key: string]: any}

export type GetTvTvIdRecommendations404 = {[key: string]: any}

export type GetTvTvIdRecommendations401 = {[key: string]: any}

export type GetTvTvIdRecommendations200 = {[key: string]: any}

export type GetTvTvIdScreenedTheatrically404 = {[key: string]: any}

export type GetTvTvIdScreenedTheatrically401 = {[key: string]: any}

export type GetTvTvIdScreenedTheatrically200 = {[key: string]: any}

export type GetTvTvIdCredits404 = {[key: string]: any}

export type GetTvTvIdCredits401 = {[key: string]: any}

export type GetTvTvIdCredits200 = {[key: string]: any}

export type GetTvTvIdChanges404 = {[key: string]: any}

export type GetTvTvIdChanges401 = {[key: string]: any}

export type GetTvTvIdChanges200 = {[key: string]: any}

export type GetTvTvIdExternalIds404 = {[key: string]: any}

export type GetTvTvIdExternalIds401 = {[key: string]: any}

export type GetTvTvIdExternalIds200 = {[key: string]: any}

export type GetTvTvIdKeywords404 = {[key: string]: any}

export type GetTvTvIdKeywords401 = {[key: string]: any}

export type GetTvTvIdKeywords200 = {[key: string]: any}

export type GetTvTvIdVideos404 = {[key: string]: any}

export type GetTvTvIdVideos401 = {[key: string]: any}

export type GetTvTvIdVideos200 = {[key: string]: any}

export type GetTvTvIdWatchProviders404 = {[key: string]: any}

export type GetTvTvIdWatchProviders401 = {[key: string]: any}

export type GetTvTvIdWatchProviders200 = {[key: string]: any}

export type GetTvTvIdReviews404 = {[key: string]: any}

export type GetTvTvIdReviews401 = {[key: string]: any}

export type GetTvTvIdReviews200 = {[key: string]: any}

export type GetTvTvIdImages404 = {[key: string]: any}

export type GetTvTvIdImages401 = {[key: string]: any}

export type GetTvTvIdImages200 = {[key: string]: any}

export type GetTvTvIdEpisodeGroups404 = {[key: string]: any}

export type GetTvTvIdEpisodeGroups401 = {[key: string]: any}

export type GetTvTvIdEpisodeGroups200 = {[key: string]: any}

export type GetTvTvIdAccountStates404 = {[key: string]: any}

export type GetTvTvIdAccountStates401 = {[key: string]: any}

export type GetTvTvIdAccountStates200 = {[key: string]: any}

export type GetTvTvIdAccountStatesParams = {
    guest_session_id?: string
    session_id?: string
}

export type GetTvTvIdTranslations404 = {[key: string]: any}

export type GetTvTvIdTranslations401 = {[key: string]: any}

export type GetTvTvIdTranslations200 = {[key: string]: any}

export type GetTvTvIdContentRatings404 = {[key: string]: any}

export type GetTvTvIdContentRatings401 = {[key: string]: any}

export type GetTvTvIdContentRatings200 = {[key: string]: any}

export type GetTvTvIdSimilar404 = {[key: string]: any}

export type GetTvTvIdSimilar401 = {[key: string]: any}

export type GetTvTvIdSimilar200 = {[key: string]: any}

export type GetTvTvIdAggregateCredits404 = {[key: string]: any}

export type GetTvTvIdAggregateCredits401 = {[key: string]: any}

export type GetTvTvIdAggregateCredits200 = {[key: string]: any}

export type GetTvTvIdAlternativeTitles404 = {[key: string]: any}

export type GetTvTvIdAlternativeTitles401 = {[key: string]: any}

export type GetTvTvIdAlternativeTitles200 = {[key: string]: any}

export type GetTvTvId404 = {[key: string]: any}

export type GetTvTvId401 = {[key: string]: any}

export type GetTvTvId200 = {[key: string]: any}

export type DeleteTvTvIdRating401 = {[key: string]: any}

export type DeleteTvTvIdRating200 = {[key: string]: any}

export type DeleteTvTvIdRatingParams = {
    guest_session_id?: string
    session_id?: string
}

export type PostTvTvIdRating404 = {[key: string]: any}

export type PostTvTvIdRating401 = {[key: string]: any}

export type PostTvTvIdRating201 = {[key: string]: any}

export type PostTvTvIdRatingParams = {
    guest_session_id?: string
    session_id?: string
}

export type GetTvTvIdSeasonSeasonNumberTranslations404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberTranslations401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberTranslations200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberImages404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberImages401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberImages200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberCredits404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberCredits401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberCredits200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberExternalIds404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberExternalIds401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberExternalIds200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberVideos404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberVideos401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberVideos200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberAggregateCredits404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberAggregateCredits401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberAggregateCredits200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberAccountStates404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberAccountStates401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberAccountStates200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberAccountStatesParams = {
    guest_session_id?: string
    session_id?: string
}

export type GetTvTvIdSeasonSeasonNumber404 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumber401 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumber200 = {[key: string]: any}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams =
    {
        guest_session_id?: string
        session_id?: string
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds200 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber404 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber401 = {
    [key: string]: any
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber200 = {
    [key: string]: any
}

export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating404 = {
    [key: string]: any
}

export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401 = {
    [key: string]: any
}

export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating201 = {
    [key: string]: any
}

export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams = {
    guest_session_id?: string
    session_id?: string
}

export type DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401 = {
    [key: string]: any
}

export type DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating200 = {
    [key: string]: any
}

export type DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams = {
    guest_session_id?: string
    session_id?: string
}

/**
 * Remove your rating for a TV episode.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Delete Rating
 */
export const deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    params?: DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
) => {
    return TMDBInstance<DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`,
            method: 'DELETE',
            params,
        },
    )
}

export const getDeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationOptions =
    <
        TError = ErrorType<DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401>,
        TContext = unknown,
    >(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
                >
            >,
            TError,
            {
                tvId: number
                seasonNumber: number
                episodeNumber: number
                params?: DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
            },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<
                typeof deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >,
        TError,
        {
            tvId: number
            seasonNumber: number
            episodeNumber: number
            params?: DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
        },
        TContext
    > => {
        const {mutation: mutationOptions} = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
                >
            >,
            {
                tvId: number
                seasonNumber: number
                episodeNumber: number
                params?: DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
            }
        > = (props) => {
            const {tvId, seasonNumber, episodeNumber, params} = props ?? {}

            return deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating(
                tvId,
                seasonNumber,
                episodeNumber,
                params,
            )
        }

        return {mutationFn, ...mutationOptions}
    }

export type DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >
    >

export type DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationError =
    ErrorType<DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401>

/**
 * @summary Delete Rating
 */
export const useDeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
    TError = ErrorType<DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof deleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >,
        TError,
        {
            tvId: number
            seasonNumber: number
            episodeNumber: number
            params?: DeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
        },
        TContext
    >
}) => {
    const mutationOptions =
        getDeleteTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationOptions(
            options,
        )

    return useMutation(mutationOptions)
}

/**
 * Rate a TV episode.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Rate TV Episode
 */
export const postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBody: string,
    params?: PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
) => {
    return TMDBInstance<PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating201>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`,
            method: 'POST',
            headers: {'Content-Type': '*/*'},
            data: postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBody,
            params,
        },
    )
}

export const getPostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationOptions =
    <
        TError = ErrorType<
            | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401
            | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating404
        >,
        TContext = unknown,
    >(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
                >
            >,
            TError,
            {
                tvId: number
                seasonNumber: number
                episodeNumber: number
                data: string
                params?: PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
            },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<
                typeof postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >,
        TError,
        {
            tvId: number
            seasonNumber: number
            episodeNumber: number
            data: string
            params?: PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
        },
        TContext
    > => {
        const {mutation: mutationOptions} = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
                >
            >,
            {
                tvId: number
                seasonNumber: number
                episodeNumber: number
                data: string
                params?: PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
            }
        > = (props) => {
            const {tvId, seasonNumber, episodeNumber, data, params} =
                props ?? {}

            return postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating(
                tvId,
                seasonNumber,
                episodeNumber,
                data,
                params,
            )
        }

        return {mutationFn, ...mutationOptions}
    }

export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >
    >
export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationBody =
    string
export type PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationError =
    ErrorType<
        | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401
        | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating404
    >

/**
 * @summary Rate TV Episode
 */
export const usePostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
    TError = ErrorType<
        | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating401
        | PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof postTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating
            >
        >,
        TError,
        {
            tvId: number
            seasonNumber: number
            episodeNumber: number
            data: string
            params?: PostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams
        },
        TContext
    >
}) => {
    const mutationOptions =
        getPostTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingMutationOptions(
            options,
        )

    return useMutation(mutationOptions)
}

/**
 * Get the TV episode details by id.

Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |
 * @summary Get Details
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber200>({
        url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryKey = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
) => {
    return [
        `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}`,
    ] as const
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber
                    >
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryKey(
            tvId,
            seasonNumber,
            episodeNumber,
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber>
        >
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber(
            tvId,
            seasonNumber,
            episodeNumber,
            signal,
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber && episodeNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<
            ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber>
        >,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber>
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber404
    >

/**
 * @summary Get Details
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the external ids for a TV episode. We currently support the following external sources.

| **External Sources** |
| -------------------- |
| IMDb ID              |
| TVDB ID              |
| Freebase MID*        |
| Freebase ID*         |
| TVRage ID*           |

*Defunct or no longer available as a service.
 * @summary Get External IDs
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/external_ids`,
            method: 'GET',
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryKey =
    (tvId: number, seasonNumber: number, episodeNumber: number) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/external_ids`,
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds(
                tvId,
                seasonNumber,
                episodeNumber,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds404
    >

/**
 * @summary Get External IDs
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds = <
    TData = Awaited<
        ReturnType<
            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
        >
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the videos that have been added to a TV episode.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
| March 23, 2019 | Vimeo was added as a video source. |
| March 20, 2019 | "Behind the Scenes", "Bloopers" and "Recap" were added as valid video types. |
 * @summary Get  Videos
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/videos`,
            method: 'GET',
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryKey =
    (tvId: number, seasonNumber: number, episodeNumber: number) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/videos`,
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos(
                tvId,
                seasonNumber,
                episodeNumber,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos404
    >

/**
 * @summary Get  Videos
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get your rating for a episode.
 * @summary Get Account States
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/account_states`,
            method: 'GET',
            params,
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryKey =
    (
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        params?: GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
    ) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/account_states`,
            ...(params ? [params] : []),
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        params?: GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
                params,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates(
                tvId,
                seasonNumber,
                episodeNumber,
                params,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates404
    >

/**
 * @summary Get Account States
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates = <
    TData = Awaited<
        ReturnType<
            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
        >
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            params,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the translation data for an episode.
 * @summary Get Translations
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/translations`,
            method: 'GET',
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryKey =
    (tvId: number, seasonNumber: number, episodeNumber: number) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/translations`,
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations(
                tvId,
                seasonNumber,
                episodeNumber,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations404
    >

/**
 * @summary Get Translations
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations = <
    TData = Awaited<
        ReturnType<
            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
        >
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the credits (cast, crew and guest stars) for a TV episode.
 * @summary Get Credits
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/credits`,
            method: 'GET',
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryKey =
    (tvId: number, seasonNumber: number, episodeNumber: number) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/credits`,
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits(
                tvId,
                seasonNumber,
                episodeNumber,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits404
    >

/**
 * @summary Get Credits
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits = <
    TData = Awaited<
        ReturnType<
            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
        >
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images that belong to a TV episode.

Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
 * @summary Get Images
 */
export const getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages = (
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages200>(
        {
            url: `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/images`,
            method: 'GET',
            signal,
        },
    )
}

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryKey =
    (tvId: number, seasonNumber: number, episodeNumber: number) => {
        return [
            `/tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/images`,
        ] as const
    }

export const getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
            >
        >,
        TError = ErrorType<
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages401
            | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages404
        >,
    >(
        tvId: number,
        seasonNumber: number,
        episodeNumber: number,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
                        >
                    >,
                    TError,
                    TData
                >
            >
        },
    ) => {
        const {query: queryOptions} = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryKey(
                tvId,
                seasonNumber,
                episodeNumber,
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
                >
            >
        > = ({signal}) =>
            getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages(
                tvId,
                seasonNumber,
                episodeNumber,
                signal,
            )

        return {
            queryKey,
            queryFn,
            enabled: !!(tvId && seasonNumber && episodeNumber),
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
                >
            >,
            TError,
            TData
        > & {queryKey: QueryKey}
    }

export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
            >
        >
    >
export type GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryError =
    ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages404
    >

/**
 * @summary Get Images
 */
export const useGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages401
        | GetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages404
    >,
>(
    tvId: number,
    seasonNumber: number,
    episodeNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryOptions(
            tvId,
            seasonNumber,
            episodeNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the TV season details by id.

Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
 * @summary Get Details
 */
export const getTvTvIdSeasonSeasonNumber = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumber200>({
        url: `/tv/${tvId}/season/${seasonNumber}`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}`] as const
}

export const getGetTvTvIdSeasonSeasonNumberQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>,
    TError = ErrorType<
        GetTvTvIdSeasonSeasonNumber401 | GetTvTvIdSeasonSeasonNumber404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>
    > = ({signal}) => getTvTvIdSeasonSeasonNumber(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>
>
export type GetTvTvIdSeasonSeasonNumberQueryError = ErrorType<
    GetTvTvIdSeasonSeasonNumber401 | GetTvTvIdSeasonSeasonNumber404
>

/**
 * @summary Get Details
 */
export const useGetTvTvIdSeasonSeasonNumber = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>,
    TError = ErrorType<
        GetTvTvIdSeasonSeasonNumber401 | GetTvTvIdSeasonSeasonNumber404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumber>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Returns all of the user ratings for the season's episodes.
 * @summary Get Account States
 */
export const getTvTvIdSeasonSeasonNumberAccountStates = (
    tvId: number,
    seasonNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberAccountStatesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberAccountStates200>({
        url: `/tv/${tvId}/season/${seasonNumber}/account_states`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberAccountStatesQueryKey = (
    tvId: number,
    seasonNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberAccountStatesParams,
) => {
    return [
        `/tv/${tvId}/season/${seasonNumber}/account_states`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetTvTvIdSeasonSeasonNumberAccountStatesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberAccountStates401
        | GetTvTvIdSeasonSeasonNumberAccountStates404
    >,
>(
    tvId: number,
    seasonNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberAccountStatesQueryKey(
            tvId,
            seasonNumber,
            params,
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberAccountStates(
            tvId,
            seasonNumber,
            params,
            signal,
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberAccountStatesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>>
>
export type GetTvTvIdSeasonSeasonNumberAccountStatesQueryError = ErrorType<
    | GetTvTvIdSeasonSeasonNumberAccountStates401
    | GetTvTvIdSeasonSeasonNumberAccountStates404
>

/**
 * @summary Get Account States
 */
export const useGetTvTvIdSeasonSeasonNumberAccountStates = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberAccountStates401
        | GetTvTvIdSeasonSeasonNumberAccountStates404
    >,
>(
    tvId: number,
    seasonNumber: number,
    params?: GetTvTvIdSeasonSeasonNumberAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberAccountStates>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberAccountStatesQueryOptions(
            tvId,
            seasonNumber,
            params,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the aggregate credits for TV season.

This call differs from the main `credits` call in that it does not only return the season credits, but rather is a view of all the cast & crew for all of the episodes belonging to a season.
 * @summary Get Aggregate Credits
 */
export const getTvTvIdSeasonSeasonNumberAggregateCredits = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberAggregateCredits200>({
        url: `/tv/${tvId}/season/${seasonNumber}/aggregate_credits`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberAggregateCreditsQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/aggregate_credits`] as const
}

export const getGetTvTvIdSeasonSeasonNumberAggregateCreditsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberAggregateCredits>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberAggregateCredits401
        | GetTvTvIdSeasonSeasonNumberAggregateCredits404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberAggregateCredits
                    >
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberAggregateCreditsQueryKey(
            tvId,
            seasonNumber,
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAggregateCredits>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberAggregateCredits(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAggregateCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberAggregateCreditsQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberAggregateCredits>>
    >
export type GetTvTvIdSeasonSeasonNumberAggregateCreditsQueryError = ErrorType<
    | GetTvTvIdSeasonSeasonNumberAggregateCredits401
    | GetTvTvIdSeasonSeasonNumberAggregateCredits404
>

/**
 * @summary Get Aggregate Credits
 */
export const useGetTvTvIdSeasonSeasonNumberAggregateCredits = <
    TData = Awaited<
        ReturnType<typeof getTvTvIdSeasonSeasonNumberAggregateCredits>
    >,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberAggregateCredits401
        | GetTvTvIdSeasonSeasonNumberAggregateCredits404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getTvTvIdSeasonSeasonNumberAggregateCredits
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetTvTvIdSeasonSeasonNumberAggregateCreditsQueryOptions(
            tvId,
            seasonNumber,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the videos that have been added to a TV season.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
| March 23, 2019 | Vimeo was added as a video source. |
| March 20, 2019 | "Behind the Scenes" and "Bloopers" and "Recap" were added as valid video types. |
 * @summary Get Videos
 */
export const getTvTvIdSeasonSeasonNumberVideos = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberVideos200>({
        url: `/tv/${tvId}/season/${seasonNumber}/videos`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberVideosQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/videos`] as const
}

export const getGetTvTvIdSeasonSeasonNumberVideosQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberVideos401
        | GetTvTvIdSeasonSeasonNumberVideos404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberVideosQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberVideos(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberVideosQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>
>
export type GetTvTvIdSeasonSeasonNumberVideosQueryError = ErrorType<
    GetTvTvIdSeasonSeasonNumberVideos401 | GetTvTvIdSeasonSeasonNumberVideos404
>

/**
 * @summary Get Videos
 */
export const useGetTvTvIdSeasonSeasonNumberVideos = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberVideos401
        | GetTvTvIdSeasonSeasonNumberVideos404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberVideos>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberVideosQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the external ids for a TV season. We currently support the following external sources.

| **Media Databases** |
| ------------------- |
| TVDB ID             |
| Freebase MID*       |
| Freebase ID*        |
| TVRage ID*          |

*Defunct or no longer available as a service.
 * @summary Get External IDs
 */
export const getTvTvIdSeasonSeasonNumberExternalIds = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberExternalIds200>({
        url: `/tv/${tvId}/season/${seasonNumber}/external_ids`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberExternalIdsQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/external_ids`] as const
}

export const getGetTvTvIdSeasonSeasonNumberExternalIdsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberExternalIds401
        | GetTvTvIdSeasonSeasonNumberExternalIds404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberExternalIdsQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberExternalIds(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberExternalIdsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>>
>
export type GetTvTvIdSeasonSeasonNumberExternalIdsQueryError = ErrorType<
    | GetTvTvIdSeasonSeasonNumberExternalIds401
    | GetTvTvIdSeasonSeasonNumberExternalIds404
>

/**
 * @summary Get External IDs
 */
export const useGetTvTvIdSeasonSeasonNumberExternalIds = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberExternalIds401
        | GetTvTvIdSeasonSeasonNumberExternalIds404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberExternalIds>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberExternalIdsQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the credits for TV season.
 * @summary Get Credits
 */
export const getTvTvIdSeasonSeasonNumberCredits = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberCredits200>({
        url: `/tv/${tvId}/season/${seasonNumber}/credits`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberCreditsQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/credits`] as const
}

export const getGetTvTvIdSeasonSeasonNumberCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberCredits401
        | GetTvTvIdSeasonSeasonNumberCredits404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberCreditsQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberCredits(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>
>
export type GetTvTvIdSeasonSeasonNumberCreditsQueryError = ErrorType<
    | GetTvTvIdSeasonSeasonNumberCredits401
    | GetTvTvIdSeasonSeasonNumberCredits404
>

/**
 * @summary Get Credits
 */
export const useGetTvTvIdSeasonSeasonNumberCredits = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberCredits401
        | GetTvTvIdSeasonSeasonNumberCredits404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberCreditsQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images that belong to a TV season.

Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
 * @summary Get Images
 */
export const getTvTvIdSeasonSeasonNumberImages = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberImages200>({
        url: `/tv/${tvId}/season/${seasonNumber}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberImagesQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/images`] as const
}

export const getGetTvTvIdSeasonSeasonNumberImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberImages401
        | GetTvTvIdSeasonSeasonNumberImages404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberImagesQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberImages(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>
>
export type GetTvTvIdSeasonSeasonNumberImagesQueryError = ErrorType<
    GetTvTvIdSeasonSeasonNumberImages401 | GetTvTvIdSeasonSeasonNumberImages404
>

/**
 * @summary Get Images
 */
export const useGetTvTvIdSeasonSeasonNumberImages = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberImages401
        | GetTvTvIdSeasonSeasonNumberImages404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberImagesQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the credits for TV season.
 * @summary Get Translations
 */
export const getTvTvIdSeasonSeasonNumberTranslations = (
    tvId: number,
    seasonNumber: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdSeasonSeasonNumberTranslations200>({
        url: `/tv/${tvId}/season/${seasonNumber}/translations`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSeasonSeasonNumberTranslationsQueryKey = (
    tvId: number,
    seasonNumber: number,
) => {
    return [`/tv/${tvId}/season/${seasonNumber}/translations`] as const
}

export const getGetTvTvIdSeasonSeasonNumberTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberTranslations401
        | GetTvTvIdSeasonSeasonNumberTranslations404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdSeasonSeasonNumberTranslationsQueryKey(tvId, seasonNumber)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>>
    > = ({signal}) =>
        getTvTvIdSeasonSeasonNumberTranslations(tvId, seasonNumber, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(tvId && seasonNumber),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSeasonSeasonNumberTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>>
>
export type GetTvTvIdSeasonSeasonNumberTranslationsQueryError = ErrorType<
    | GetTvTvIdSeasonSeasonNumberTranslations401
    | GetTvTvIdSeasonSeasonNumberTranslations404
>

/**
 * @summary Get Translations
 */
export const useGetTvTvIdSeasonSeasonNumberTranslations = <
    TData = Awaited<ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>>,
    TError = ErrorType<
        | GetTvTvIdSeasonSeasonNumberTranslations401
        | GetTvTvIdSeasonSeasonNumberTranslations404
    >,
>(
    tvId: number,
    seasonNumber: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getTvTvIdSeasonSeasonNumberTranslations>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSeasonSeasonNumberTranslationsQueryOptions(
        tvId,
        seasonNumber,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Rate a TV show.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Rate TV Show
 */
export const postTvTvIdRating = (
    tvId: number,
    postTvTvIdRatingBody: string,
    params?: PostTvTvIdRatingParams,
) => {
    return TMDBInstance<PostTvTvIdRating201>({
        url: `/tv/${tvId}/rating`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postTvTvIdRatingBody,
        params,
    })
}

export const getPostTvTvIdRatingMutationOptions = <
    TError = ErrorType<PostTvTvIdRating401 | PostTvTvIdRating404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTvTvIdRating>>,
        TError,
        {tvId: number; data: string; params?: PostTvTvIdRatingParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postTvTvIdRating>>,
    TError,
    {tvId: number; data: string; params?: PostTvTvIdRatingParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postTvTvIdRating>>,
        {tvId: number; data: string; params?: PostTvTvIdRatingParams}
    > = (props) => {
        const {tvId, data, params} = props ?? {}

        return postTvTvIdRating(tvId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostTvTvIdRatingMutationResult = NonNullable<
    Awaited<ReturnType<typeof postTvTvIdRating>>
>
export type PostTvTvIdRatingMutationBody = string
export type PostTvTvIdRatingMutationError = ErrorType<
    PostTvTvIdRating401 | PostTvTvIdRating404
>

/**
 * @summary Rate TV Show
 */
export const usePostTvTvIdRating = <
    TError = ErrorType<PostTvTvIdRating401 | PostTvTvIdRating404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postTvTvIdRating>>,
        TError,
        {tvId: number; data: string; params?: PostTvTvIdRatingParams},
        TContext
    >
}) => {
    const mutationOptions = getPostTvTvIdRatingMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Remove your rating for a TV show.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Delete Rating
 */
export const deleteTvTvIdRating = (
    tvId: number,
    params?: DeleteTvTvIdRatingParams,
) => {
    return TMDBInstance<DeleteTvTvIdRating200>({
        url: `/tv/${tvId}/rating`,
        method: 'DELETE',
        params,
    })
}

export const getDeleteTvTvIdRatingMutationOptions = <
    TError = ErrorType<DeleteTvTvIdRating401>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteTvTvIdRating>>,
        TError,
        {tvId: number; params?: DeleteTvTvIdRatingParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteTvTvIdRating>>,
    TError,
    {tvId: number; params?: DeleteTvTvIdRatingParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteTvTvIdRating>>,
        {tvId: number; params?: DeleteTvTvIdRatingParams}
    > = (props) => {
        const {tvId, params} = props ?? {}

        return deleteTvTvIdRating(tvId, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type DeleteTvTvIdRatingMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteTvTvIdRating>>
>

export type DeleteTvTvIdRatingMutationError = ErrorType<DeleteTvTvIdRating401>

/**
 * @summary Delete Rating
 */
export const useDeleteTvTvIdRating = <
    TError = ErrorType<DeleteTvTvIdRating401>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteTvTvIdRating>>,
        TError,
        {tvId: number; params?: DeleteTvTvIdRatingParams},
        TContext
    >
}) => {
    const mutationOptions = getDeleteTvTvIdRatingMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Get the primary TV show details by id.

Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
| November 14, 2020 | The `tagline` has been added to the default response, and is also available as part of the translations method. |
| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |
| March 12, 2018 | Networks return proper logos and we introduced SVG support. |
| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |
 * @summary Get Details
 */
export const getTvTvId = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvId200>({
        url: `/tv/${tvId}`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdQueryKey = (tvId: number) => {
    return [`/tv/${tvId}`] as const
}

export const getGetTvTvIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvId>>,
    TError = ErrorType<GetTvTvId401 | GetTvTvId404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdQueryKey(tvId)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvTvId>>> = ({
        signal,
    }) => getTvTvId(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvId>>
>
export type GetTvTvIdQueryError = ErrorType<GetTvTvId401 | GetTvTvId404>

/**
 * @summary Get Details
 */
export const useGetTvTvId = <
    TData = Awaited<ReturnType<typeof getTvTvId>>,
    TError = ErrorType<GetTvTvId401 | GetTvTvId404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Returns all of the alternative titles for a TV show.
 * @summary Get Alternative Titles
 */
export const getTvTvIdAlternativeTitles = (
    tvId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdAlternativeTitles200>({
        url: `/tv/${tvId}/alternative_titles`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdAlternativeTitlesQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/alternative_titles`] as const
}

export const getGetTvTvIdAlternativeTitlesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>,
    TError = ErrorType<
        GetTvTvIdAlternativeTitles401 | GetTvTvIdAlternativeTitles404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdAlternativeTitlesQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>
    > = ({signal}) => getTvTvIdAlternativeTitles(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdAlternativeTitlesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>
>
export type GetTvTvIdAlternativeTitlesQueryError = ErrorType<
    GetTvTvIdAlternativeTitles401 | GetTvTvIdAlternativeTitles404
>

/**
 * @summary Get Alternative Titles
 */
export const useGetTvTvIdAlternativeTitles = <
    TData = Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>,
    TError = ErrorType<
        GetTvTvIdAlternativeTitles401 | GetTvTvIdAlternativeTitles404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAlternativeTitles>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdAlternativeTitlesQueryOptions(
        tvId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the aggregate credits (cast and crew) that have been added to a TV show.

This call differs from the main `credits` call in that it does not return the newest season but rather, is a view of all the entire cast & crew for all episodes belonging to a TV show.
 * @summary Get Aggregate Credits
 */
export const getTvTvIdAggregateCredits = (
    tvId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdAggregateCredits200>({
        url: `/tv/${tvId}/aggregate_credits`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdAggregateCreditsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/aggregate_credits`] as const
}

export const getGetTvTvIdAggregateCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>,
    TError = ErrorType<
        GetTvTvIdAggregateCredits401 | GetTvTvIdAggregateCredits404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdAggregateCreditsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>
    > = ({signal}) => getTvTvIdAggregateCredits(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdAggregateCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>
>
export type GetTvTvIdAggregateCreditsQueryError = ErrorType<
    GetTvTvIdAggregateCredits401 | GetTvTvIdAggregateCredits404
>

/**
 * @summary Get Aggregate Credits
 */
export const useGetTvTvIdAggregateCredits = <
    TData = Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>,
    TError = ErrorType<
        GetTvTvIdAggregateCredits401 | GetTvTvIdAggregateCredits404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAggregateCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdAggregateCreditsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of similar TV shows. These items are assembled by looking at keywords and genres.
 * @summary Get Similar TV Shows
 */
export const getTvTvIdSimilar = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdSimilar200>({
        url: `/tv/${tvId}/similar`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdSimilarQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/similar`] as const
}

export const getGetTvTvIdSimilarQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdSimilar>>,
    TError = ErrorType<GetTvTvIdSimilar401 | GetTvTvIdSimilar404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSimilar>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdSimilarQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdSimilar>>
    > = ({signal}) => getTvTvIdSimilar(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdSimilar>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdSimilarQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdSimilar>>
>
export type GetTvTvIdSimilarQueryError = ErrorType<
    GetTvTvIdSimilar401 | GetTvTvIdSimilar404
>

/**
 * @summary Get Similar TV Shows
 */
export const useGetTvTvIdSimilar = <
    TData = Awaited<ReturnType<typeof getTvTvIdSimilar>>,
    TError = ErrorType<GetTvTvIdSimilar401 | GetTvTvIdSimilar404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdSimilar>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdSimilarQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of content ratings (certifications) that have been added to a TV show.
 * @summary Get Content Ratings
 */
export const getTvTvIdContentRatings = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdContentRatings200>({
        url: `/tv/${tvId}/content_ratings`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdContentRatingsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/content_ratings`] as const
}

export const getGetTvTvIdContentRatingsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdContentRatings>>,
    TError = ErrorType<GetTvTvIdContentRatings401 | GetTvTvIdContentRatings404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdContentRatings>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdContentRatingsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdContentRatings>>
    > = ({signal}) => getTvTvIdContentRatings(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdContentRatings>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdContentRatingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdContentRatings>>
>
export type GetTvTvIdContentRatingsQueryError = ErrorType<
    GetTvTvIdContentRatings401 | GetTvTvIdContentRatings404
>

/**
 * @summary Get Content Ratings
 */
export const useGetTvTvIdContentRatings = <
    TData = Awaited<ReturnType<typeof getTvTvIdContentRatings>>,
    TError = ErrorType<GetTvTvIdContentRatings401 | GetTvTvIdContentRatings404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdContentRatings>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdContentRatingsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the translations that exist for a TV show.
 * @summary Get Translations
 */
export const getTvTvIdTranslations = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdTranslations200>({
        url: `/tv/${tvId}/translations`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdTranslationsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/translations`] as const
}

export const getGetTvTvIdTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdTranslations>>,
    TError = ErrorType<GetTvTvIdTranslations401 | GetTvTvIdTranslations404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdTranslations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdTranslationsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdTranslations>>
    > = ({signal}) => getTvTvIdTranslations(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdTranslations>>
>
export type GetTvTvIdTranslationsQueryError = ErrorType<
    GetTvTvIdTranslations401 | GetTvTvIdTranslations404
>

/**
 * @summary Get Translations
 */
export const useGetTvTvIdTranslations = <
    TData = Awaited<ReturnType<typeof getTvTvIdTranslations>>,
    TError = ErrorType<GetTvTvIdTranslations401 | GetTvTvIdTranslations404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdTranslations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdTranslationsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Grab the following account states for a session:

- TV show rating
- If it belongs to your watchlist
- If it belongs to your favourite list
 * @summary Get Account States
 */
export const getTvTvIdAccountStates = (
    tvId: number,
    params?: GetTvTvIdAccountStatesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdAccountStates200>({
        url: `/tv/${tvId}/account_states`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetTvTvIdAccountStatesQueryKey = (
    tvId: number,
    params?: GetTvTvIdAccountStatesParams,
) => {
    return [`/tv/${tvId}/account_states`, ...(params ? [params] : [])] as const
}

export const getGetTvTvIdAccountStatesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdAccountStates>>,
    TError = ErrorType<GetTvTvIdAccountStates401 | GetTvTvIdAccountStates404>,
>(
    tvId: number,
    params?: GetTvTvIdAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAccountStates>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvTvIdAccountStatesQueryKey(tvId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdAccountStates>>
    > = ({signal}) => getTvTvIdAccountStates(tvId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdAccountStates>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdAccountStatesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdAccountStates>>
>
export type GetTvTvIdAccountStatesQueryError = ErrorType<
    GetTvTvIdAccountStates401 | GetTvTvIdAccountStates404
>

/**
 * @summary Get Account States
 */
export const useGetTvTvIdAccountStates = <
    TData = Awaited<ReturnType<typeof getTvTvIdAccountStates>>,
    TError = ErrorType<GetTvTvIdAccountStates401 | GetTvTvIdAccountStates404>,
>(
    tvId: number,
    params?: GetTvTvIdAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdAccountStates>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdAccountStatesQueryOptions(
        tvId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get all of the episode groups that have been created for a TV show. With a group ID you can call the [get TV episode group details](#endpoint:yCouThc88qs7DGHY5) method.
 * @summary Get Episode Groups
 */
export const getTvTvIdEpisodeGroups = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdEpisodeGroups200>({
        url: `/tv/${tvId}/episode_groups`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdEpisodeGroupsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/episode_groups`] as const
}

export const getGetTvTvIdEpisodeGroupsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>,
    TError = ErrorType<GetTvTvIdEpisodeGroups401 | GetTvTvIdEpisodeGroups404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdEpisodeGroupsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>
    > = ({signal}) => getTvTvIdEpisodeGroups(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdEpisodeGroupsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>
>
export type GetTvTvIdEpisodeGroupsQueryError = ErrorType<
    GetTvTvIdEpisodeGroups401 | GetTvTvIdEpisodeGroups404
>

/**
 * @summary Get Episode Groups
 */
export const useGetTvTvIdEpisodeGroups = <
    TData = Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>,
    TError = ErrorType<GetTvTvIdEpisodeGroups401 | GetTvTvIdEpisodeGroups404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdEpisodeGroups>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdEpisodeGroupsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images that belong to a TV show.

Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
 * @summary Get Images
 */
export const getTvTvIdImages = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdImages200>({
        url: `/tv/${tvId}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdImagesQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/images`] as const
}

export const getGetTvTvIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdImages>>,
    TError = ErrorType<GetTvTvIdImages401 | GetTvTvIdImages404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdImagesQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdImages>>
    > = ({signal}) => getTvTvIdImages(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdImages>>
>
export type GetTvTvIdImagesQueryError = ErrorType<
    GetTvTvIdImages401 | GetTvTvIdImages404
>

/**
 * @summary Get Images
 */
export const useGetTvTvIdImages = <
    TData = Awaited<ReturnType<typeof getTvTvIdImages>>,
    TError = ErrorType<GetTvTvIdImages401 | GetTvTvIdImages404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdImagesQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the reviews for a TV show.
 * @summary Get Reviews
 */
export const getTvTvIdReviews = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdReviews200>({
        url: `/tv/${tvId}/reviews`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdReviewsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/reviews`] as const
}

export const getGetTvTvIdReviewsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdReviews>>,
    TError = ErrorType<GetTvTvIdReviews401 | GetTvTvIdReviews404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdReviews>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdReviewsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdReviews>>
    > = ({signal}) => getTvTvIdReviews(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdReviews>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdReviewsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdReviews>>
>
export type GetTvTvIdReviewsQueryError = ErrorType<
    GetTvTvIdReviews401 | GetTvTvIdReviews404
>

/**
 * @summary Get Reviews
 */
export const useGetTvTvIdReviews = <
    TData = Awaited<ReturnType<typeof getTvTvIdReviews>>,
    TError = ErrorType<GetTvTvIdReviews401 | GetTvTvIdReviews404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdReviews>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdReviewsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.

This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.

You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.

**Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
 * @summary Get Watch Providers
 */
export const getTvTvIdWatchProviders = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdWatchProviders200>({
        url: `/tv/${tvId}/watch/providers`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdWatchProvidersQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/watch/providers`] as const
}

export const getGetTvTvIdWatchProvidersQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdWatchProviders>>,
    TError = ErrorType<GetTvTvIdWatchProviders401 | GetTvTvIdWatchProviders404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdWatchProviders>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdWatchProvidersQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdWatchProviders>>
    > = ({signal}) => getTvTvIdWatchProviders(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdWatchProviders>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdWatchProvidersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdWatchProviders>>
>
export type GetTvTvIdWatchProvidersQueryError = ErrorType<
    GetTvTvIdWatchProviders401 | GetTvTvIdWatchProviders404
>

/**
 * @summary Get Watch Providers
 */
export const useGetTvTvIdWatchProviders = <
    TData = Awaited<ReturnType<typeof getTvTvIdWatchProviders>>,
    TError = ErrorType<GetTvTvIdWatchProviders401 | GetTvTvIdWatchProviders404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdWatchProviders>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdWatchProvidersQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the videos that have been added to a TV show.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
| March 23, 2019 | Vimeo was added as a video source. |
| March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
 * @summary Get Videos
 */
export const getTvTvIdVideos = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdVideos200>({
        url: `/tv/${tvId}/videos`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdVideosQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/videos`] as const
}

export const getGetTvTvIdVideosQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdVideos>>,
    TError = ErrorType<GetTvTvIdVideos401 | GetTvTvIdVideos404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdVideos>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdVideosQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdVideos>>
    > = ({signal}) => getTvTvIdVideos(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdVideos>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdVideosQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdVideos>>
>
export type GetTvTvIdVideosQueryError = ErrorType<
    GetTvTvIdVideos401 | GetTvTvIdVideos404
>

/**
 * @summary Get Videos
 */
export const useGetTvTvIdVideos = <
    TData = Awaited<ReturnType<typeof getTvTvIdVideos>>,
    TError = ErrorType<GetTvTvIdVideos401 | GetTvTvIdVideos404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdVideos>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdVideosQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the keywords that have been added to a TV show.
 * @summary Get Keywords
 */
export const getTvTvIdKeywords = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdKeywords200>({
        url: `/tv/${tvId}/keywords`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdKeywordsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/keywords`] as const
}

export const getGetTvTvIdKeywordsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdKeywords>>,
    TError = ErrorType<GetTvTvIdKeywords401 | GetTvTvIdKeywords404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdKeywords>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdKeywordsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdKeywords>>
    > = ({signal}) => getTvTvIdKeywords(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdKeywords>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdKeywordsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdKeywords>>
>
export type GetTvTvIdKeywordsQueryError = ErrorType<
    GetTvTvIdKeywords401 | GetTvTvIdKeywords404
>

/**
 * @summary Get Keywords
 */
export const useGetTvTvIdKeywords = <
    TData = Awaited<ReturnType<typeof getTvTvIdKeywords>>,
    TError = ErrorType<GetTvTvIdKeywords401 | GetTvTvIdKeywords404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdKeywords>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdKeywordsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the external ids for a TV show. We currently support the following external sources.

| **Media Databases** | **Social IDs** |
| ------------------- | -------------- |
| IMDb ID             | Facebook       |
| TVDB ID             | Instagram      |
| Freebase MID*       | Twitter        |
| Freebase ID*        |                |
| TVRage ID*          |                |

*Defunct or no longer available as a service.
 * @summary Get External IDs
 */
export const getTvTvIdExternalIds = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdExternalIds200>({
        url: `/tv/${tvId}/external_ids`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdExternalIdsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/external_ids`] as const
}

export const getGetTvTvIdExternalIdsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdExternalIds>>,
    TError = ErrorType<GetTvTvIdExternalIds401 | GetTvTvIdExternalIds404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdExternalIds>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdExternalIdsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdExternalIds>>
    > = ({signal}) => getTvTvIdExternalIds(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdExternalIds>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdExternalIdsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdExternalIds>>
>
export type GetTvTvIdExternalIdsQueryError = ErrorType<
    GetTvTvIdExternalIds401 | GetTvTvIdExternalIds404
>

/**
 * @summary Get External IDs
 */
export const useGetTvTvIdExternalIds = <
    TData = Awaited<ReturnType<typeof getTvTvIdExternalIds>>,
    TError = ErrorType<GetTvTvIdExternalIds401 | GetTvTvIdExternalIds404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdExternalIds>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdExternalIdsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the changes for a TV show. By default only the last 24 hours are returned.

You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.

TV show changes are different than movie changes in that there are some edits on seasons and episodes that will create a change entry at the show level. These can be found under the season and episode keys. These keys will contain a `series_id` and `episode_id`. You can use the [season changes](#endpoint:ZqhtyQbJ4YXz8RSya) and [episode changes](#endpoint:FpqrhBzgf2RJv4bHC) methods to look these up individually.
 * @summary Get Changes
 */
export const getTvTvIdChanges = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdChanges200>({
        url: `/tv/${tvId}/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdChangesQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/changes`] as const
}

export const getGetTvTvIdChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdChanges>>,
    TError = ErrorType<GetTvTvIdChanges401 | GetTvTvIdChanges404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdChanges>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdChangesQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdChanges>>
    > = ({signal}) => getTvTvIdChanges(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdChanges>>
>
export type GetTvTvIdChangesQueryError = ErrorType<
    GetTvTvIdChanges401 | GetTvTvIdChanges404
>

/**
 * @summary Get Changes
 */
export const useGetTvTvIdChanges = <
    TData = Awaited<ReturnType<typeof getTvTvIdChanges>>,
    TError = ErrorType<GetTvTvIdChanges401 | GetTvTvIdChanges404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdChanges>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdChangesQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the credits (cast and crew) that have been added to a TV show.
 * @summary Get Credits
 */
export const getTvTvIdCredits = (tvId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetTvTvIdCredits200>({
        url: `/tv/${tvId}/credits`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdCreditsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/credits`] as const
}

export const getGetTvTvIdCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdCredits>>,
    TError = ErrorType<GetTvTvIdCredits401 | GetTvTvIdCredits404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTvIdCreditsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdCredits>>
    > = ({signal}) => getTvTvIdCredits(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdCredits>>
>
export type GetTvTvIdCreditsQueryError = ErrorType<
    GetTvTvIdCredits401 | GetTvTvIdCredits404
>

/**
 * @summary Get Credits
 */
export const useGetTvTvIdCredits = <
    TData = Awaited<ReturnType<typeof getTvTvIdCredits>>,
    TError = ErrorType<GetTvTvIdCredits401 | GetTvTvIdCredits404>,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdCreditsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of seasons or episodes that have been screened in a film festival or theatre.
 * @summary Get Screened Theatrically
 */
export const getTvTvIdScreenedTheatrically = (
    tvId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdScreenedTheatrically200>({
        url: `/tv/${tvId}/screened_theatrically`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdScreenedTheatricallyQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/screened_theatrically`] as const
}

export const getGetTvTvIdScreenedTheatricallyQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>,
    TError = ErrorType<
        GetTvTvIdScreenedTheatrically401 | GetTvTvIdScreenedTheatrically404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdScreenedTheatricallyQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>
    > = ({signal}) => getTvTvIdScreenedTheatrically(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdScreenedTheatricallyQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>
>
export type GetTvTvIdScreenedTheatricallyQueryError = ErrorType<
    GetTvTvIdScreenedTheatrically401 | GetTvTvIdScreenedTheatrically404
>

/**
 * @summary Get Screened Theatrically
 */
export const useGetTvTvIdScreenedTheatrically = <
    TData = Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>,
    TError = ErrorType<
        GetTvTvIdScreenedTheatrically401 | GetTvTvIdScreenedTheatrically404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdScreenedTheatrically>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdScreenedTheatricallyQueryOptions(
        tvId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of TV show recommendations for this item.
 * @summary Get Recommendations
 */
export const getTvTvIdRecommendations = (
    tvId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvTvIdRecommendations200>({
        url: `/tv/${tvId}/recommendations`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTvIdRecommendationsQueryKey = (tvId: number) => {
    return [`/tv/${tvId}/recommendations`] as const
}

export const getGetTvTvIdRecommendationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTvIdRecommendations>>,
    TError = ErrorType<
        GetTvTvIdRecommendations401 | GetTvTvIdRecommendations404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdRecommendations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvTvIdRecommendationsQueryKey(tvId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvTvIdRecommendations>>
    > = ({signal}) => getTvTvIdRecommendations(tvId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!tvId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTvIdRecommendations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTvIdRecommendationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTvIdRecommendations>>
>
export type GetTvTvIdRecommendationsQueryError = ErrorType<
    GetTvTvIdRecommendations401 | GetTvTvIdRecommendations404
>

/**
 * @summary Get Recommendations
 */
export const useGetTvTvIdRecommendations = <
    TData = Awaited<ReturnType<typeof getTvTvIdRecommendations>>,
    TError = ErrorType<
        GetTvTvIdRecommendations401 | GetTvTvIdRecommendations404
    >,
>(
    tvId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvTvIdRecommendations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTvIdRecommendationsQueryOptions(tvId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the top rated TV shows on TMDB.
 * @summary Get Top Rated
 */
export const getTvTopRated = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvTopRated200>({
        url: `/tv/top_rated`,
        method: 'GET',
        signal,
    })
}

export const getGetTvTopRatedQueryKey = () => {
    return [`/tv/top_rated`] as const
}

export const getGetTvTopRatedQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvTopRated>>,
    TError = ErrorType<GetTvTopRated401 | GetTvTopRated404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvTopRated>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvTopRatedQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvTopRated>>> = ({
        signal,
    }) => getTvTopRated(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvTopRated>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvTopRatedQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvTopRated>>
>
export type GetTvTopRatedQueryError = ErrorType<
    GetTvTopRated401 | GetTvTopRated404
>

/**
 * @summary Get Top Rated
 */
export const useGetTvTopRated = <
    TData = Awaited<ReturnType<typeof getTvTopRated>>,
    TError = ErrorType<GetTvTopRated401 | GetTvTopRated404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvTopRated>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvTopRatedQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the most newly created TV show. This is a live response and will continuously change.
 * @summary Get Latest
 */
export const getTvLatest = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvLatest200>({
        url: `/tv/latest`,
        method: 'GET',
        signal,
    })
}

export const getGetTvLatestQueryKey = () => {
    return [`/tv/latest`] as const
}

export const getGetTvLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvLatest>>,
    TError = ErrorType<GetTvLatest401 | GetTvLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvLatest>>, TError, TData>
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvLatestQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvLatest>>> = ({
        signal,
    }) => getTvLatest(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvLatest>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvLatest>>
>
export type GetTvLatestQueryError = ErrorType<GetTvLatest401 | GetTvLatest404>

/**
 * @summary Get Latest
 */
export const useGetTvLatest = <
    TData = Awaited<ReturnType<typeof getTvLatest>>,
    TError = ErrorType<GetTvLatest401 | GetTvLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvLatest>>, TError, TData>
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvLatestQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all of the TV show ids that have been changed in the past 24 hours.

You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
 * @summary Get TV Change List
 */
export const getTvChanges = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvChanges200>({
        url: `/tv/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetTvChangesQueryKey = () => {
    return [`/tv/changes`] as const
}

export const getGetTvChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvChanges>>,
    TError = ErrorType<GetTvChanges401 | GetTvChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvChanges>>, TError, TData>
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvChangesQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvChanges>>> = ({
        signal,
    }) => getTvChanges(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvChanges>>
>
export type GetTvChangesQueryError = ErrorType<
    GetTvChanges401 | GetTvChanges404
>

/**
 * @summary Get TV Change List
 */
export const useGetTvChanges = <
    TData = Awaited<ReturnType<typeof getTvChanges>>,
    TError = ErrorType<GetTvChanges401 | GetTvChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvChanges>>, TError, TData>
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvChangesQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the details of a TV episode group. Groups support 7 different types which are enumerated as the following:

1. Original air date
2. Absolute
3. DVD
4. Digital
5. Story arc
6. Production
7. TV
 * @summary Get Details
 */
export const getTvEpisodeGroupId = (id: string, signal?: AbortSignal) => {
    return TMDBInstance<GetTvEpisodeGroupId200>({
        url: `/tv/episode_group/${id}`,
        method: 'GET',
        signal,
    })
}

export const getGetTvEpisodeGroupIdQueryKey = (id: string) => {
    return [`/tv/episode_group/${id}`] as const
}

export const getGetTvEpisodeGroupIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvEpisodeGroupId>>,
    TError = ErrorType<GetTvEpisodeGroupId401 | GetTvEpisodeGroupId404>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvEpisodeGroupId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetTvEpisodeGroupIdQueryKey(id)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvEpisodeGroupId>>
    > = ({signal}) => getTvEpisodeGroupId(id, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!id,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvEpisodeGroupId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvEpisodeGroupIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvEpisodeGroupId>>
>
export type GetTvEpisodeGroupIdQueryError = ErrorType<
    GetTvEpisodeGroupId401 | GetTvEpisodeGroupId404
>

/**
 * @summary Get Details
 */
export const useGetTvEpisodeGroupId = <
    TData = Awaited<ReturnType<typeof getTvEpisodeGroupId>>,
    TError = ErrorType<GetTvEpisodeGroupId401 | GetTvEpisodeGroupId404>,
>(
    id: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvEpisodeGroupId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvEpisodeGroupIdQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the current popular TV shows on TMDB. This list updates daily.
 * @summary Get Popular
 */
export const getTvPopular = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvPopular200>({
        url: `/tv/popular`,
        method: 'GET',
        signal,
    })
}

export const getGetTvPopularQueryKey = () => {
    return [`/tv/popular`] as const
}

export const getGetTvPopularQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvPopular>>,
    TError = ErrorType<GetTvPopular401 | GetTvPopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvPopular>>, TError, TData>
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvPopularQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvPopular>>> = ({
        signal,
    }) => getTvPopular(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvPopular>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvPopularQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvPopular>>
>
export type GetTvPopularQueryError = ErrorType<
    GetTvPopular401 | GetTvPopular404
>

/**
 * @summary Get Popular
 */
export const useGetTvPopular = <
    TData = Awaited<ReturnType<typeof getTvPopular>>,
    TError = ErrorType<GetTvPopular401 | GetTvPopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getTvPopular>>, TError, TData>
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvPopularQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of shows that are currently on the air.

This query looks for any TV show that has an episode with an air date in the next 7 days.
 * @summary Get TV On The Air
 */
export const getTvOnTheAir = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvOnTheAir200>({
        url: `/tv/on_the_air`,
        method: 'GET',
        signal,
    })
}

export const getGetTvOnTheAirQueryKey = () => {
    return [`/tv/on_the_air`] as const
}

export const getGetTvOnTheAirQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvOnTheAir>>,
    TError = ErrorType<GetTvOnTheAir401 | GetTvOnTheAir404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvOnTheAir>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvOnTheAirQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTvOnTheAir>>> = ({
        signal,
    }) => getTvOnTheAir(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvOnTheAir>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvOnTheAirQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvOnTheAir>>
>
export type GetTvOnTheAirQueryError = ErrorType<
    GetTvOnTheAir401 | GetTvOnTheAir404
>

/**
 * @summary Get TV On The Air
 */
export const useGetTvOnTheAir = <
    TData = Awaited<ReturnType<typeof getTvOnTheAir>>,
    TError = ErrorType<GetTvOnTheAir401 | GetTvOnTheAir404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvOnTheAir>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvOnTheAirQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the changes for a TV season. By default only the last 24 hours are returned.

You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
 * @summary Get  Changes
 */
export const getTvSeasonSeasonIdChanges = (
    seasonId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvSeasonSeasonIdChanges200>({
        url: `/tv/season/${seasonId}/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetTvSeasonSeasonIdChangesQueryKey = (seasonId: number) => {
    return [`/tv/season/${seasonId}/changes`] as const
}

export const getGetTvSeasonSeasonIdChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>,
    TError = ErrorType<
        GetTvSeasonSeasonIdChanges401 | GetTvSeasonSeasonIdChanges404
    >,
>(
    seasonId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvSeasonSeasonIdChangesQueryKey(seasonId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>
    > = ({signal}) => getTvSeasonSeasonIdChanges(seasonId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!seasonId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvSeasonSeasonIdChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>
>
export type GetTvSeasonSeasonIdChangesQueryError = ErrorType<
    GetTvSeasonSeasonIdChanges401 | GetTvSeasonSeasonIdChanges404
>

/**
 * @summary Get  Changes
 */
export const useGetTvSeasonSeasonIdChanges = <
    TData = Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>,
    TError = ErrorType<
        GetTvSeasonSeasonIdChanges401 | GetTvSeasonSeasonIdChanges404
    >,
>(
    seasonId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvSeasonSeasonIdChanges>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvSeasonSeasonIdChangesQueryOptions(
        seasonId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of TV shows that are airing today. This query is purely day based as we do not currently support airing times.

You can specify a [timezone](endpoint:KQ4CDdEoWKJYLkrhS) to offset the day calculation. Without a specified timezone, this query defaults to EST (Eastern Time UTC-05:00).
 * @summary Get TV Airing Today
 */
export const getTvAiringToday = (signal?: AbortSignal) => {
    return TMDBInstance<GetTvAiringToday200>({
        url: `/tv/airing_today`,
        method: 'GET',
        signal,
    })
}

export const getGetTvAiringTodayQueryKey = () => {
    return [`/tv/airing_today`] as const
}

export const getGetTvAiringTodayQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvAiringToday>>,
    TError = ErrorType<GetTvAiringToday401 | GetTvAiringToday404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvAiringToday>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTvAiringTodayQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvAiringToday>>
    > = ({signal}) => getTvAiringToday(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getTvAiringToday>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvAiringTodayQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvAiringToday>>
>
export type GetTvAiringTodayQueryError = ErrorType<
    GetTvAiringToday401 | GetTvAiringToday404
>

/**
 * @summary Get TV Airing Today
 */
export const useGetTvAiringToday = <
    TData = Awaited<ReturnType<typeof getTvAiringToday>>,
    TError = ErrorType<GetTvAiringToday401 | GetTvAiringToday404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getTvAiringToday>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvAiringTodayQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the changes for a TV episode. By default only the last 24 hours are returned.

You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
 * @summary Get Changes
 */
export const getTvEpisodeEpisodeIdChanges = (
    episodeId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTvEpisodeEpisodeIdChanges200>({
        url: `/tv/episode/${episodeId}/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetTvEpisodeEpisodeIdChangesQueryKey = (episodeId: number) => {
    return [`/tv/episode/${episodeId}/changes`] as const
}

export const getGetTvEpisodeEpisodeIdChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>,
    TError = ErrorType<
        GetTvEpisodeEpisodeIdChanges401 | GetTvEpisodeEpisodeIdChanges404
    >,
>(
    episodeId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTvEpisodeEpisodeIdChangesQueryKey(episodeId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>
    > = ({signal}) => getTvEpisodeEpisodeIdChanges(episodeId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!episodeId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTvEpisodeEpisodeIdChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>
>
export type GetTvEpisodeEpisodeIdChangesQueryError = ErrorType<
    GetTvEpisodeEpisodeIdChanges401 | GetTvEpisodeEpisodeIdChanges404
>

/**
 * @summary Get Changes
 */
export const useGetTvEpisodeEpisodeIdChanges = <
    TData = Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>,
    TError = ErrorType<
        GetTvEpisodeEpisodeIdChanges401 | GetTvEpisodeEpisodeIdChanges404
    >,
>(
    episodeId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTvEpisodeEpisodeIdChanges>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTvEpisodeEpisodeIdChangesQueryOptions(
        episodeId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.

Discover also supports a nice list of sort options. See below for all of the available options.

Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. 

Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
| January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
 * @summary TV Discover
 */
export const getDiscoverTv = (
    params?: GetDiscoverTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetDiscoverTv200>({
        url: `/discover/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetDiscoverTvQueryKey = (params?: GetDiscoverTvParams) => {
    return [`/discover/tv`, ...(params ? [params] : [])] as const
}

export const getGetDiscoverTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiscoverTv>>,
    TError = ErrorType<GetDiscoverTv401 | GetDiscoverTv404>,
>(
    params?: GetDiscoverTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getDiscoverTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDiscoverTvQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscoverTv>>> = ({
        signal,
    }) => getDiscoverTv(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getDiscoverTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetDiscoverTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getDiscoverTv>>
>
export type GetDiscoverTvQueryError = ErrorType<
    GetDiscoverTv401 | GetDiscoverTv404
>

/**
 * @summary TV Discover
 */
export const useGetDiscoverTv = <
    TData = Awaited<ReturnType<typeof getDiscoverTv>>,
    TError = ErrorType<GetDiscoverTv401 | GetDiscoverTv404>,
>(
    params?: GetDiscoverTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getDiscoverTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetDiscoverTvQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.

Discover also supports a nice list of sort options. See below for all of the available options.

Please note, when using `certification` \ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).

If you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying "2|3" would return the limited theatrical release date as opposed to "3|2" which would return the theatrical date.

Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. 

Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
| January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
 * @summary Movie Discover
 */
export const getDiscoverMovie = (
    params?: GetDiscoverMovieParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetDiscoverMovie200>({
        url: `/discover/movie`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetDiscoverMovieQueryKey = (
    params?: GetDiscoverMovieParams,
) => {
    return [`/discover/movie`, ...(params ? [params] : [])] as const
}

export const getGetDiscoverMovieQueryOptions = <
    TData = Awaited<ReturnType<typeof getDiscoverMovie>>,
    TError = ErrorType<GetDiscoverMovie401 | GetDiscoverMovie404>,
>(
    params?: GetDiscoverMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getDiscoverMovie>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetDiscoverMovieQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getDiscoverMovie>>
    > = ({signal}) => getDiscoverMovie(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getDiscoverMovie>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetDiscoverMovieQueryResult = NonNullable<
    Awaited<ReturnType<typeof getDiscoverMovie>>
>
export type GetDiscoverMovieQueryError = ErrorType<
    GetDiscoverMovie401 | GetDiscoverMovie404
>

/**
 * @summary Movie Discover
 */
export const useGetDiscoverMovie = <
    TData = Awaited<ReturnType<typeof getDiscoverMovie>>,
    TError = ErrorType<GetDiscoverMovie401 | GetDiscoverMovie404>,
>(
    params?: GetDiscoverMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getDiscoverMovie>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetDiscoverMovieQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * If you would like to delete (or "logout") from a session, call this method with a valid session ID.
 * @summary Delete Session
 */
export const deleteAuthenticationSession = () => {
    return TMDBInstance<DeleteAuthenticationSession200>({
        url: `/authentication/session`,
        method: 'DELETE',
    })
}

export const getDeleteAuthenticationSessionMutationOptions = <
    TError = ErrorType<
        DeleteAuthenticationSession401 | DeleteAuthenticationSession404
    >,
    TVariables = void,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteAuthenticationSession>>,
        TError,
        TVariables,
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuthenticationSession>>,
    TError,
    TVariables,
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteAuthenticationSession>>,
        TVariables
    > = () => {
        return deleteAuthenticationSession()
    }

    return {mutationFn, ...mutationOptions}
}

export type DeleteAuthenticationSessionMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteAuthenticationSession>>
>

export type DeleteAuthenticationSessionMutationError = ErrorType<
    DeleteAuthenticationSession401 | DeleteAuthenticationSession404
>

/**
 * @summary Delete Session
 */
export const useDeleteAuthenticationSession = <
    TError = ErrorType<
        DeleteAuthenticationSession401 | DeleteAuthenticationSession404
    >,
    TVariables = void,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteAuthenticationSession>>,
        TError,
        TVariables,
        TContext
    >
}) => {
    const mutationOptions =
        getDeleteAuthenticationSessionMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * You can use this method to create a fully valid session ID once a user has validated the request token. More information about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Create Session
 */
export const postAuthenticationSessionNew = (
    postAuthenticationSessionNewBody: string,
) => {
    return TMDBInstance<PostAuthenticationSessionNew200>({
        url: `/authentication/session/new`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postAuthenticationSessionNewBody,
    })
}

export const getPostAuthenticationSessionNewMutationOptions = <
    TError = ErrorType<
        PostAuthenticationSessionNew401 | PostAuthenticationSessionNew404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationSessionNew>>,
        TError,
        {data: string},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticationSessionNew>>,
    TError,
    {data: string},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthenticationSessionNew>>,
        {data: string}
    > = (props) => {
        const {data} = props ?? {}

        return postAuthenticationSessionNew(data)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostAuthenticationSessionNewMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAuthenticationSessionNew>>
>
export type PostAuthenticationSessionNewMutationBody = string
export type PostAuthenticationSessionNewMutationError = ErrorType<
    PostAuthenticationSessionNew401 | PostAuthenticationSessionNew404
>

/**
 * @summary Create Session
 */
export const usePostAuthenticationSessionNew = <
    TError = ErrorType<
        PostAuthenticationSessionNew401 | PostAuthenticationSessionNew404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationSessionNew>>,
        TError,
        {data: string},
        TContext
    >
}) => {
    const mutationOptions =
        getPostAuthenticationSessionNewMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Use this method to create a v3 session ID if you already have a valid v4 access token. The v4 token needs to be authenticated by the user. Your standard "read token" will not validate to create a session ID.
 * @summary Create Session (from v4 access token)
 */
export const postAuthenticationSessionConvert4 = (
    postAuthenticationSessionConvert4Body: string,
) => {
    return TMDBInstance<PostAuthenticationSessionConvert4200>({
        url: `/authentication/session/convert/4`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postAuthenticationSessionConvert4Body,
    })
}

export const getPostAuthenticationSessionConvert4MutationOptions = <
    TError = ErrorType<
        | PostAuthenticationSessionConvert4401
        | PostAuthenticationSessionConvert4404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationSessionConvert4>>,
        TError,
        {data: string},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticationSessionConvert4>>,
    TError,
    {data: string},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthenticationSessionConvert4>>,
        {data: string}
    > = (props) => {
        const {data} = props ?? {}

        return postAuthenticationSessionConvert4(data)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostAuthenticationSessionConvert4MutationResult = NonNullable<
    Awaited<ReturnType<typeof postAuthenticationSessionConvert4>>
>
export type PostAuthenticationSessionConvert4MutationBody = string
export type PostAuthenticationSessionConvert4MutationError = ErrorType<
    PostAuthenticationSessionConvert4401 | PostAuthenticationSessionConvert4404
>

/**
 * @summary Create Session (from v4 access token)
 */
export const usePostAuthenticationSessionConvert4 = <
    TError = ErrorType<
        | PostAuthenticationSessionConvert4401
        | PostAuthenticationSessionConvert4404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationSessionConvert4>>,
        TError,
        {data: string},
        TContext
    >
}) => {
    const mutationOptions =
        getPostAuthenticationSessionConvert4MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Create a temporary request token that can be used to validate a TMDB user login. More details about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Create Request Token
 */
export const getAuthenticationTokenNew = (signal?: AbortSignal) => {
    return TMDBInstance<GetAuthenticationTokenNew200>({
        url: `/authentication/token/new`,
        method: 'GET',
        signal,
    })
}

export const getGetAuthenticationTokenNewQueryKey = () => {
    return [`/authentication/token/new`] as const
}

export const getGetAuthenticationTokenNewQueryOptions = <
    TData = Awaited<ReturnType<typeof getAuthenticationTokenNew>>,
    TError = ErrorType<
        GetAuthenticationTokenNew401 | GetAuthenticationTokenNew404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getAuthenticationTokenNew>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetAuthenticationTokenNewQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAuthenticationTokenNew>>
    > = ({signal}) => getAuthenticationTokenNew(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationTokenNew>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAuthenticationTokenNewQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAuthenticationTokenNew>>
>
export type GetAuthenticationTokenNewQueryError = ErrorType<
    GetAuthenticationTokenNew401 | GetAuthenticationTokenNew404
>

/**
 * @summary Create Request Token
 */
export const useGetAuthenticationTokenNew = <
    TData = Awaited<ReturnType<typeof getAuthenticationTokenNew>>,
    TError = ErrorType<
        GetAuthenticationTokenNew401 | GetAuthenticationTokenNew404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getAuthenticationTokenNew>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAuthenticationTokenNewQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * This method allows an application to validate a request token by entering a username and password.

Not all applications have access to a web view so this can be used as a substitute.

Please note, the preferred method of validating a request token is to have a user authenticate the request via the TMDB website. You can read about that method [here](#docTextSection:NSZtgz7zptsiLYxXZ).

If you decide to use this method please **use HTTPS**.
 * @summary Create Session With Login
 */
export const postAuthenticationTokenValidateWithLogin = (
    postAuthenticationTokenValidateWithLoginBody: string,
) => {
    return TMDBInstance<PostAuthenticationTokenValidateWithLogin200>({
        url: `/authentication/token/validate_with_login`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postAuthenticationTokenValidateWithLoginBody,
    })
}

export const getPostAuthenticationTokenValidateWithLoginMutationOptions = <
    TError = ErrorType<
        | PostAuthenticationTokenValidateWithLogin401
        | PostAuthenticationTokenValidateWithLogin404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationTokenValidateWithLogin>>,
        TError,
        {data: string},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticationTokenValidateWithLogin>>,
    TError,
    {data: string},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAuthenticationTokenValidateWithLogin>>,
        {data: string}
    > = (props) => {
        const {data} = props ?? {}

        return postAuthenticationTokenValidateWithLogin(data)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostAuthenticationTokenValidateWithLoginMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof postAuthenticationTokenValidateWithLogin>>
    >
export type PostAuthenticationTokenValidateWithLoginMutationBody = string
export type PostAuthenticationTokenValidateWithLoginMutationError = ErrorType<
    | PostAuthenticationTokenValidateWithLogin401
    | PostAuthenticationTokenValidateWithLogin404
>

/**
 * @summary Create Session With Login
 */
export const usePostAuthenticationTokenValidateWithLogin = <
    TError = ErrorType<
        | PostAuthenticationTokenValidateWithLogin401
        | PostAuthenticationTokenValidateWithLogin404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAuthenticationTokenValidateWithLogin>>,
        TError,
        {data: string},
        TContext
    >
}) => {
    const mutationOptions =
        getPostAuthenticationTokenValidateWithLoginMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * This method will let you create a new guest session. Guest sessions are a type of session that will let a user rate movies and TV shows but not require them to have a TMDB user account. More information about user authentication can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).

Please note, you should only generate a single guest session per user (or device) as you will be able to attach the ratings to a TMDB user account in the future. There is also IP limits in place so you should always make sure it's the end user doing the guest session actions.

If a guest session is not used for the first time within 24 hours, it will be automatically deleted.
 * @summary Create Guest Session
 */
export const getAuthenticationGuestSessionNew = (signal?: AbortSignal) => {
    return TMDBInstance<GetAuthenticationGuestSessionNew200>({
        url: `/authentication/guest_session/new`,
        method: 'GET',
        signal,
    })
}

export const getGetAuthenticationGuestSessionNewQueryKey = () => {
    return [`/authentication/guest_session/new`] as const
}

export const getGetAuthenticationGuestSessionNewQueryOptions = <
    TData = Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>,
    TError = ErrorType<
        | GetAuthenticationGuestSessionNew401
        | GetAuthenticationGuestSessionNew404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetAuthenticationGuestSessionNewQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>
    > = ({signal}) => getAuthenticationGuestSessionNew(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAuthenticationGuestSessionNewQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>
>
export type GetAuthenticationGuestSessionNewQueryError = ErrorType<
    GetAuthenticationGuestSessionNew401 | GetAuthenticationGuestSessionNew404
>

/**
 * @summary Create Guest Session
 */
export const useGetAuthenticationGuestSessionNew = <
    TData = Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>,
    TError = ErrorType<
        | GetAuthenticationGuestSessionNew401
        | GetAuthenticationGuestSessionNew404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getAuthenticationGuestSessionNew>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetAuthenticationGuestSessionNewQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the details of a list.
 * @summary Get Details
 */
export const getListListId = (listId: string, signal?: AbortSignal) => {
    return TMDBInstance<GetListListId200>({
        url: `/list/${listId}`,
        method: 'GET',
        signal,
    })
}

export const getGetListListIdQueryKey = (listId: string) => {
    return [`/list/${listId}`] as const
}

export const getGetListListIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getListListId>>,
    TError = ErrorType<GetListListId401 | GetListListId404>,
>(
    listId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getListListId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetListListIdQueryKey(listId)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getListListId>>> = ({
        signal,
    }) => getListListId(listId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!listId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getListListId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetListListIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getListListId>>
>
export type GetListListIdQueryError = ErrorType<
    GetListListId401 | GetListListId404
>

/**
 * @summary Get Details
 */
export const useGetListListId = <
    TData = Awaited<ReturnType<typeof getListListId>>,
    TError = ErrorType<GetListListId401 | GetListListId404>,
>(
    listId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getListListId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetListListIdQueryOptions(listId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Delete a list.
 * @summary Delete List
 */
export const deleteListListId = (
    listId: string,
    params?: DeleteListListIdParams,
) => {
    return TMDBInstance<DeleteListListId201>({
        url: `/list/${listId}`,
        method: 'DELETE',
        params,
    })
}

export const getDeleteListListIdMutationOptions = <
    TError = ErrorType<DeleteListListId401 | DeleteListListId404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteListListId>>,
        TError,
        {listId: string; params?: DeleteListListIdParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteListListId>>,
    TError,
    {listId: string; params?: DeleteListListIdParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteListListId>>,
        {listId: string; params?: DeleteListListIdParams}
    > = (props) => {
        const {listId, params} = props ?? {}

        return deleteListListId(listId, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type DeleteListListIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteListListId>>
>

export type DeleteListListIdMutationError = ErrorType<
    DeleteListListId401 | DeleteListListId404
>

/**
 * @summary Delete List
 */
export const useDeleteListListId = <
    TError = ErrorType<DeleteListListId401 | DeleteListListId404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteListListId>>,
        TError,
        {listId: string; params?: DeleteListListIdParams},
        TContext
    >
}) => {
    const mutationOptions = getDeleteListListIdMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Add a movie to a list.
 * @summary Add Movie
 */
export const postListListIdAddItem = (
    listId: string,
    postListListIdAddItemBody: string,
    params?: PostListListIdAddItemParams,
) => {
    return TMDBInstance<PostListListIdAddItem201>({
        url: `/list/${listId}/add_item`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postListListIdAddItemBody,
        params,
    })
}

export const getPostListListIdAddItemMutationOptions = <
    TError = ErrorType<PostListListIdAddItem401 | PostListListIdAddItem404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdAddItem>>,
        TError,
        {listId: string; data: string; params?: PostListListIdAddItemParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postListListIdAddItem>>,
    TError,
    {listId: string; data: string; params?: PostListListIdAddItemParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postListListIdAddItem>>,
        {listId: string; data: string; params?: PostListListIdAddItemParams}
    > = (props) => {
        const {listId, data, params} = props ?? {}

        return postListListIdAddItem(listId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostListListIdAddItemMutationResult = NonNullable<
    Awaited<ReturnType<typeof postListListIdAddItem>>
>
export type PostListListIdAddItemMutationBody = string
export type PostListListIdAddItemMutationError = ErrorType<
    PostListListIdAddItem401 | PostListListIdAddItem404
>

/**
 * @summary Add Movie
 */
export const usePostListListIdAddItem = <
    TError = ErrorType<PostListListIdAddItem401 | PostListListIdAddItem404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdAddItem>>,
        TError,
        {listId: string; data: string; params?: PostListListIdAddItemParams},
        TContext
    >
}) => {
    const mutationOptions = getPostListListIdAddItemMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Remove a movie from a list.
 * @summary Remove Movie
 */
export const postListListIdRemoveItem = (
    listId: string,
    postListListIdRemoveItemBody: string,
    params?: PostListListIdRemoveItemParams,
) => {
    return TMDBInstance<PostListListIdRemoveItem200>({
        url: `/list/${listId}/remove_item`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postListListIdRemoveItemBody,
        params,
    })
}

export const getPostListListIdRemoveItemMutationOptions = <
    TError = ErrorType<
        PostListListIdRemoveItem401 | PostListListIdRemoveItem404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdRemoveItem>>,
        TError,
        {listId: string; data: string; params?: PostListListIdRemoveItemParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postListListIdRemoveItem>>,
    TError,
    {listId: string; data: string; params?: PostListListIdRemoveItemParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postListListIdRemoveItem>>,
        {listId: string; data: string; params?: PostListListIdRemoveItemParams}
    > = (props) => {
        const {listId, data, params} = props ?? {}

        return postListListIdRemoveItem(listId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostListListIdRemoveItemMutationResult = NonNullable<
    Awaited<ReturnType<typeof postListListIdRemoveItem>>
>
export type PostListListIdRemoveItemMutationBody = string
export type PostListListIdRemoveItemMutationError = ErrorType<
    PostListListIdRemoveItem401 | PostListListIdRemoveItem404
>

/**
 * @summary Remove Movie
 */
export const usePostListListIdRemoveItem = <
    TError = ErrorType<
        PostListListIdRemoveItem401 | PostListListIdRemoveItem404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdRemoveItem>>,
        TError,
        {listId: string; data: string; params?: PostListListIdRemoveItemParams},
        TContext
    >
}) => {
    const mutationOptions = getPostListListIdRemoveItemMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Clear all of the items from a list.
 * @summary Clear List
 */
export const postListListIdClear = (
    listId: string,
    params?: PostListListIdClearParams,
) => {
    return TMDBInstance<PostListListIdClear201>({
        url: `/list/${listId}/clear`,
        method: 'POST',
        params,
    })
}

export const getPostListListIdClearMutationOptions = <
    TError = ErrorType<PostListListIdClear401 | PostListListIdClear404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdClear>>,
        TError,
        {listId: string; params?: PostListListIdClearParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postListListIdClear>>,
    TError,
    {listId: string; params?: PostListListIdClearParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postListListIdClear>>,
        {listId: string; params?: PostListListIdClearParams}
    > = (props) => {
        const {listId, params} = props ?? {}

        return postListListIdClear(listId, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostListListIdClearMutationResult = NonNullable<
    Awaited<ReturnType<typeof postListListIdClear>>
>

export type PostListListIdClearMutationError = ErrorType<
    PostListListIdClear401 | PostListListIdClear404
>

/**
 * @summary Clear List
 */
export const usePostListListIdClear = <
    TError = ErrorType<PostListListIdClear401 | PostListListIdClear404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postListListIdClear>>,
        TError,
        {listId: string; params?: PostListListIdClearParams},
        TContext
    >
}) => {
    const mutationOptions = getPostListListIdClearMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * You can use this method to check if a movie has already been added to the list.
 * @summary Check Item Status
 */
export const getListListIdItemStatus = (
    listId: string,
    params?: GetListListIdItemStatusParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetListListIdItemStatus200>({
        url: `/list/${listId}/item_status`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetListListIdItemStatusQueryKey = (
    listId: string,
    params?: GetListListIdItemStatusParams,
) => {
    return [`/list/${listId}/item_status`, ...(params ? [params] : [])] as const
}

export const getGetListListIdItemStatusQueryOptions = <
    TData = Awaited<ReturnType<typeof getListListIdItemStatus>>,
    TError = ErrorType<GetListListIdItemStatus401 | GetListListIdItemStatus404>,
>(
    listId: string,
    params?: GetListListIdItemStatusParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getListListIdItemStatus>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetListListIdItemStatusQueryKey(listId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getListListIdItemStatus>>
    > = ({signal}) => getListListIdItemStatus(listId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!listId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getListListIdItemStatus>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetListListIdItemStatusQueryResult = NonNullable<
    Awaited<ReturnType<typeof getListListIdItemStatus>>
>
export type GetListListIdItemStatusQueryError = ErrorType<
    GetListListIdItemStatus401 | GetListListIdItemStatus404
>

/**
 * @summary Check Item Status
 */
export const useGetListListIdItemStatus = <
    TData = Awaited<ReturnType<typeof getListListIdItemStatus>>,
    TError = ErrorType<GetListListIdItemStatus401 | GetListListIdItemStatus404>,
>(
    listId: string,
    params?: GetListListIdItemStatusParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getListListIdItemStatus>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetListListIdItemStatusQueryOptions(
        listId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Create a list.
 * @summary Create List
 */
export const postList = (postListBody: string, params?: PostListParams) => {
    return TMDBInstance<PostList201>({
        url: `/list`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postListBody,
        params,
    })
}

export const getPostListMutationOptions = <
    TError = ErrorType<PostList401 | PostList404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postList>>,
        TError,
        {data: string; params?: PostListParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postList>>,
    TError,
    {data: string; params?: PostListParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postList>>,
        {data: string; params?: PostListParams}
    > = (props) => {
        const {data, params} = props ?? {}

        return postList(data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostListMutationResult = NonNullable<
    Awaited<ReturnType<typeof postList>>
>
export type PostListMutationBody = string
export type PostListMutationError = ErrorType<PostList401 | PostList404>

/**
 * @summary Create List
 */
export const usePostList = <
    TError = ErrorType<PostList401 | PostList404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postList>>,
        TError,
        {data: string; params?: PostListParams},
        TContext
    >
}) => {
    const mutationOptions = getPostListMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Rate a movie.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Rate Movie
 */
export const postMovieMovieIdRating = (
    movieId: number,
    postMovieMovieIdRatingBody: string,
    params?: PostMovieMovieIdRatingParams,
) => {
    return TMDBInstance<PostMovieMovieIdRating201>({
        url: `/movie/${movieId}/rating`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postMovieMovieIdRatingBody,
        params,
    })
}

export const getPostMovieMovieIdRatingMutationOptions = <
    TError = ErrorType<PostMovieMovieIdRating401 | PostMovieMovieIdRating404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postMovieMovieIdRating>>,
        TError,
        {movieId: number; data: string; params?: PostMovieMovieIdRatingParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postMovieMovieIdRating>>,
    TError,
    {movieId: number; data: string; params?: PostMovieMovieIdRatingParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postMovieMovieIdRating>>,
        {movieId: number; data: string; params?: PostMovieMovieIdRatingParams}
    > = (props) => {
        const {movieId, data, params} = props ?? {}

        return postMovieMovieIdRating(movieId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostMovieMovieIdRatingMutationResult = NonNullable<
    Awaited<ReturnType<typeof postMovieMovieIdRating>>
>
export type PostMovieMovieIdRatingMutationBody = string
export type PostMovieMovieIdRatingMutationError = ErrorType<
    PostMovieMovieIdRating401 | PostMovieMovieIdRating404
>

/**
 * @summary Rate Movie
 */
export const usePostMovieMovieIdRating = <
    TError = ErrorType<PostMovieMovieIdRating401 | PostMovieMovieIdRating404>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postMovieMovieIdRating>>,
        TError,
        {movieId: number; data: string; params?: PostMovieMovieIdRatingParams},
        TContext
    >
}) => {
    const mutationOptions = getPostMovieMovieIdRatingMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Remove your rating for a movie.

A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
 * @summary Delete Rating
 */
export const deleteMovieMovieIdRating = (
    movieId: number,
    params?: DeleteMovieMovieIdRatingParams,
) => {
    return TMDBInstance<DeleteMovieMovieIdRating200>({
        url: `/movie/${movieId}/rating`,
        method: 'DELETE',
        params,
    })
}

export const getDeleteMovieMovieIdRatingMutationOptions = <
    TError = ErrorType<DeleteMovieMovieIdRating401>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteMovieMovieIdRating>>,
        TError,
        {movieId: number; params?: DeleteMovieMovieIdRatingParams},
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteMovieMovieIdRating>>,
    TError,
    {movieId: number; params?: DeleteMovieMovieIdRatingParams},
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteMovieMovieIdRating>>,
        {movieId: number; params?: DeleteMovieMovieIdRatingParams}
    > = (props) => {
        const {movieId, params} = props ?? {}

        return deleteMovieMovieIdRating(movieId, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type DeleteMovieMovieIdRatingMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteMovieMovieIdRating>>
>

export type DeleteMovieMovieIdRatingMutationError =
    ErrorType<DeleteMovieMovieIdRating401>

/**
 * @summary Delete Rating
 */
export const useDeleteMovieMovieIdRating = <
    TError = ErrorType<DeleteMovieMovieIdRating401>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteMovieMovieIdRating>>,
        TError,
        {movieId: number; params?: DeleteMovieMovieIdRatingParams},
        TContext
    >
}) => {
    const mutationOptions = getDeleteMovieMovieIdRatingMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Get the primary information about a movie.

Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
 * @summary Get Details
 */
export const getMovieMovieId = (movieId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetMovieMovieId200>({
        url: `/movie/${movieId}`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieMovieIdQueryKey = (movieId: number) => {
    return [`/movie/${movieId}`] as const
}

export const getGetMovieMovieIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieId>>,
    TError = ErrorType<GetMovieMovieId401 | GetMovieMovieId404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetMovieMovieIdQueryKey(movieId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieId>>
    > = ({signal}) => getMovieMovieId(movieId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieId>>
>
export type GetMovieMovieIdQueryError = ErrorType<
    GetMovieMovieId401 | GetMovieMovieId404
>

/**
 * @summary Get Details
 */
export const useGetMovieMovieId = <
    TData = Awaited<ReturnType<typeof getMovieMovieId>>,
    TError = ErrorType<GetMovieMovieId401 | GetMovieMovieId404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdQueryOptions(movieId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of translations that have been created for a movie.
 * @summary Get Translations
 */
export const getMovieMovieIdTranslations = (
    movieId: number,
    params?: GetMovieMovieIdTranslationsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdTranslations200>({
        url: `/movie/${movieId}/translations`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdTranslationsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdTranslationsParams,
) => {
    return [
        `/movie/${movieId}/translations`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdTranslations>>,
    TError = ErrorType<
        GetMovieMovieIdTranslations401 | GetMovieMovieIdTranslations404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdTranslationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdTranslations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdTranslationsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdTranslations>>
    > = ({signal}) => getMovieMovieIdTranslations(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdTranslations>>
>
export type GetMovieMovieIdTranslationsQueryError = ErrorType<
    GetMovieMovieIdTranslations401 | GetMovieMovieIdTranslations404
>

/**
 * @summary Get Translations
 */
export const useGetMovieMovieIdTranslations = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdTranslations>>,
    TError = ErrorType<
        GetMovieMovieIdTranslations401 | GetMovieMovieIdTranslations404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdTranslationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdTranslations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdTranslationsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the external ids for a movie. We currently support the following external sources.

| **Media Databases** | **Social IDs** |
| ------------------- | -------------- |
| IMDb ID             | Facebook       |
|                     | Instagram      |
|                     | Twitter        |
 * @summary Get External IDs
 */
export const getMovieMovieIdExternalIds = (
    movieId: number,
    params?: GetMovieMovieIdExternalIdsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdExternalIds200>({
        url: `/movie/${movieId}/external_ids`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdExternalIdsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdExternalIdsParams,
) => {
    return [
        `/movie/${movieId}/external_ids`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdExternalIdsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>,
    TError = ErrorType<
        GetMovieMovieIdExternalIds401 | GetMovieMovieIdExternalIds404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdExternalIdsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdExternalIdsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>
    > = ({signal}) => getMovieMovieIdExternalIds(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdExternalIdsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>
>
export type GetMovieMovieIdExternalIdsQueryError = ErrorType<
    GetMovieMovieIdExternalIds401 | GetMovieMovieIdExternalIds404
>

/**
 * @summary Get External IDs
 */
export const useGetMovieMovieIdExternalIds = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>,
    TError = ErrorType<
        GetMovieMovieIdExternalIds401 | GetMovieMovieIdExternalIds404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdExternalIdsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdExternalIds>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdExternalIdsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the changes for a movie. By default only the last 24 hours are returned.

You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
 * @summary Get Changes
 */
export const getMovieMovieIdChanges = (
    movieId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdChanges200>({
        url: `/movie/${movieId}/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieMovieIdChangesQueryKey = (movieId: number) => {
    return [`/movie/${movieId}/changes`] as const
}

export const getGetMovieMovieIdChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdChanges>>,
    TError = ErrorType<GetMovieMovieIdChanges401 | GetMovieMovieIdChanges404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdChanges>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetMovieMovieIdChangesQueryKey(movieId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdChanges>>
    > = ({signal}) => getMovieMovieIdChanges(movieId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdChanges>>
>
export type GetMovieMovieIdChangesQueryError = ErrorType<
    GetMovieMovieIdChanges401 | GetMovieMovieIdChanges404
>

/**
 * @summary Get Changes
 */
export const useGetMovieMovieIdChanges = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdChanges>>,
    TError = ErrorType<GetMovieMovieIdChanges401 | GetMovieMovieIdChanges404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdChanges>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdChangesQueryOptions(movieId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get all of the alternative titles for a movie.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| March 16, 2018 | Added the `type` field. |
 * @summary Get Alternative Titles
 */
export const getMovieMovieIdAlternativeTitles = (
    movieId: number,
    params?: GetMovieMovieIdAlternativeTitlesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdAlternativeTitles200>({
        url: `/movie/${movieId}/alternative_titles`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdAlternativeTitlesQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdAlternativeTitlesParams,
) => {
    return [
        `/movie/${movieId}/alternative_titles`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdAlternativeTitlesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>,
    TError = ErrorType<
        | GetMovieMovieIdAlternativeTitles401
        | GetMovieMovieIdAlternativeTitles404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdAlternativeTitlesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdAlternativeTitlesQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>
    > = ({signal}) => getMovieMovieIdAlternativeTitles(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdAlternativeTitlesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>
>
export type GetMovieMovieIdAlternativeTitlesQueryError = ErrorType<
    GetMovieMovieIdAlternativeTitles401 | GetMovieMovieIdAlternativeTitles404
>

/**
 * @summary Get Alternative Titles
 */
export const useGetMovieMovieIdAlternativeTitles = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>,
    TError = ErrorType<
        | GetMovieMovieIdAlternativeTitles401
        | GetMovieMovieIdAlternativeTitles404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdAlternativeTitlesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdAlternativeTitles>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdAlternativeTitlesQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the videos that have been added to a movie.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
| March 23, 2019 | Vimeo was added as a video source. |
| March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
 * @summary Get Videos
 */
export const getMovieMovieIdVideos = (
    movieId: number,
    params?: GetMovieMovieIdVideosParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdVideos200>({
        url: `/movie/${movieId}/videos`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdVideosQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdVideosParams,
) => {
    return [`/movie/${movieId}/videos`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdVideosQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdVideos>>,
    TError = ErrorType<GetMovieMovieIdVideos401 | GetMovieMovieIdVideos404>,
>(
    movieId: number,
    params?: GetMovieMovieIdVideosParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdVideos>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdVideosQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdVideos>>
    > = ({signal}) => getMovieMovieIdVideos(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdVideos>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdVideosQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdVideos>>
>
export type GetMovieMovieIdVideosQueryError = ErrorType<
    GetMovieMovieIdVideos401 | GetMovieMovieIdVideos404
>

/**
 * @summary Get Videos
 */
export const useGetMovieMovieIdVideos = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdVideos>>,
    TError = ErrorType<GetMovieMovieIdVideos401 | GetMovieMovieIdVideos404>,
>(
    movieId: number,
    params?: GetMovieMovieIdVideosParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdVideos>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdVideosQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Grab the following account states for a session:

- Movie rating
- If it belongs to your watchlist
- If it belongs to your favourite list
 * @summary Get Account States
 */
export const getMovieMovieIdAccountStates = (
    movieId: number,
    params?: GetMovieMovieIdAccountStatesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdAccountStates200>({
        url: `/movie/${movieId}/account_states`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdAccountStatesQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdAccountStatesParams,
) => {
    return [
        `/movie/${movieId}/account_states`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdAccountStatesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>,
    TError = ErrorType<
        GetMovieMovieIdAccountStates401 | GetMovieMovieIdAccountStates404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdAccountStatesQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>
    > = ({signal}) => getMovieMovieIdAccountStates(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdAccountStatesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>
>
export type GetMovieMovieIdAccountStatesQueryError = ErrorType<
    GetMovieMovieIdAccountStates401 | GetMovieMovieIdAccountStates404
>

/**
 * @summary Get Account States
 */
export const useGetMovieMovieIdAccountStates = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>,
    TError = ErrorType<
        GetMovieMovieIdAccountStates401 | GetMovieMovieIdAccountStates404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdAccountStatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdAccountStates>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdAccountStatesQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of lists that this movie belongs to.
 * @summary Get Lists
 */
export const getMovieMovieIdLists = (
    movieId: number,
    params?: GetMovieMovieIdListsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdLists200>({
        url: `/movie/${movieId}/lists`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdListsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdListsParams,
) => {
    return [`/movie/${movieId}/lists`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdListsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdLists>>,
    TError = ErrorType<GetMovieMovieIdLists401 | GetMovieMovieIdLists404>,
>(
    movieId: number,
    params?: GetMovieMovieIdListsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdLists>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdListsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdLists>>
    > = ({signal}) => getMovieMovieIdLists(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdLists>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdListsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdLists>>
>
export type GetMovieMovieIdListsQueryError = ErrorType<
    GetMovieMovieIdLists401 | GetMovieMovieIdLists404
>

/**
 * @summary Get Lists
 */
export const useGetMovieMovieIdLists = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdLists>>,
    TError = ErrorType<GetMovieMovieIdLists401 | GetMovieMovieIdLists404>,
>(
    movieId: number,
    params?: GetMovieMovieIdListsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdLists>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdListsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of similar movies. This is **not** the same as the "Recommendation" system you see on the website.

These items are assembled by looking at keywords and genres.
 * @summary Get Similar Movies
 */
export const getMovieMovieIdSimilar = (
    movieId: number,
    params?: GetMovieMovieIdSimilarParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdSimilar200>({
        url: `/movie/${movieId}/similar`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdSimilarQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdSimilarParams,
) => {
    return [`/movie/${movieId}/similar`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdSimilarQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdSimilar>>,
    TError = ErrorType<GetMovieMovieIdSimilar401 | GetMovieMovieIdSimilar404>,
>(
    movieId: number,
    params?: GetMovieMovieIdSimilarParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdSimilar>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdSimilarQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdSimilar>>
    > = ({signal}) => getMovieMovieIdSimilar(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdSimilar>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdSimilarQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdSimilar>>
>
export type GetMovieMovieIdSimilarQueryError = ErrorType<
    GetMovieMovieIdSimilar401 | GetMovieMovieIdSimilar404
>

/**
 * @summary Get Similar Movies
 */
export const useGetMovieMovieIdSimilar = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdSimilar>>,
    TError = ErrorType<GetMovieMovieIdSimilar401 | GetMovieMovieIdSimilar404>,
>(
    movieId: number,
    params?: GetMovieMovieIdSimilarParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdSimilar>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdSimilarQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of recommended movies for a movie.
 * @summary Get Recommendations
 */
export const getMovieMovieIdRecommendations = (
    movieId: number,
    params?: GetMovieMovieIdRecommendationsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdRecommendations200>({
        url: `/movie/${movieId}/recommendations`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdRecommendationsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdRecommendationsParams,
) => {
    return [
        `/movie/${movieId}/recommendations`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdRecommendationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>,
    TError = ErrorType<
        GetMovieMovieIdRecommendations401 | GetMovieMovieIdRecommendations404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdRecommendationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdRecommendationsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>
    > = ({signal}) => getMovieMovieIdRecommendations(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdRecommendationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>
>
export type GetMovieMovieIdRecommendationsQueryError = ErrorType<
    GetMovieMovieIdRecommendations401 | GetMovieMovieIdRecommendations404
>

/**
 * @summary Get Recommendations
 */
export const useGetMovieMovieIdRecommendations = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>,
    TError = ErrorType<
        GetMovieMovieIdRecommendations401 | GetMovieMovieIdRecommendations404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdRecommendationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdRecommendations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdRecommendationsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.

This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.

You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.

**Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
 * @summary Get Watch Providers
 */
export const getMovieMovieIdWatchProviders = (
    movieId: number,
    params?: GetMovieMovieIdWatchProvidersParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdWatchProviders200>({
        url: `/movie/${movieId}/watch/providers`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdWatchProvidersQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdWatchProvidersParams,
) => {
    return [
        `/movie/${movieId}/watch/providers`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdWatchProvidersQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>,
    TError = ErrorType<
        GetMovieMovieIdWatchProviders401 | GetMovieMovieIdWatchProviders404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdWatchProvidersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdWatchProvidersQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>
    > = ({signal}) => getMovieMovieIdWatchProviders(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdWatchProvidersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>
>
export type GetMovieMovieIdWatchProvidersQueryError = ErrorType<
    GetMovieMovieIdWatchProviders401 | GetMovieMovieIdWatchProviders404
>

/**
 * @summary Get Watch Providers
 */
export const useGetMovieMovieIdWatchProviders = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>,
    TError = ErrorType<
        GetMovieMovieIdWatchProviders401 | GetMovieMovieIdWatchProviders404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdWatchProvidersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdWatchProviders>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdWatchProvidersQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the keywords that have been added to a movie.
 * @summary Get Keywords
 */
export const getMovieMovieIdKeywords = (
    movieId: number,
    params?: GetMovieMovieIdKeywordsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdKeywords200>({
        url: `/movie/${movieId}/keywords`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdKeywordsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdKeywordsParams,
) => {
    return [`/movie/${movieId}/keywords`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdKeywordsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdKeywords>>,
    TError = ErrorType<GetMovieMovieIdKeywords401 | GetMovieMovieIdKeywords404>,
>(
    movieId: number,
    params?: GetMovieMovieIdKeywordsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdKeywords>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdKeywordsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdKeywords>>
    > = ({signal}) => getMovieMovieIdKeywords(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdKeywords>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdKeywordsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdKeywords>>
>
export type GetMovieMovieIdKeywordsQueryError = ErrorType<
    GetMovieMovieIdKeywords401 | GetMovieMovieIdKeywords404
>

/**
 * @summary Get Keywords
 */
export const useGetMovieMovieIdKeywords = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdKeywords>>,
    TError = ErrorType<GetMovieMovieIdKeywords401 | GetMovieMovieIdKeywords404>,
>(
    movieId: number,
    params?: GetMovieMovieIdKeywordsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdKeywords>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdKeywordsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the release date along with the certification for a movie.

Release dates support different types:

1. Premiere
2. Theatrical (limited)
3. Theatrical
4. Digital
5. Physical
6. TV
 * @summary Get Release Dates
 */
export const getMovieMovieIdReleaseDates = (
    movieId: number,
    params?: GetMovieMovieIdReleaseDatesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdReleaseDates200>({
        url: `/movie/${movieId}/release_dates`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdReleaseDatesQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdReleaseDatesParams,
) => {
    return [
        `/movie/${movieId}/release_dates`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetMovieMovieIdReleaseDatesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>,
    TError = ErrorType<
        GetMovieMovieIdReleaseDates401 | GetMovieMovieIdReleaseDates404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdReleaseDatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdReleaseDatesQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>
    > = ({signal}) => getMovieMovieIdReleaseDates(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdReleaseDatesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>
>
export type GetMovieMovieIdReleaseDatesQueryError = ErrorType<
    GetMovieMovieIdReleaseDates401 | GetMovieMovieIdReleaseDates404
>

/**
 * @summary Get Release Dates
 */
export const useGetMovieMovieIdReleaseDates = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>,
    TError = ErrorType<
        GetMovieMovieIdReleaseDates401 | GetMovieMovieIdReleaseDates404
    >,
>(
    movieId: number,
    params?: GetMovieMovieIdReleaseDatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdReleaseDates>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdReleaseDatesQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the user reviews for a movie.
 * @summary Get Reviews
 */
export const getMovieMovieIdReviews = (
    movieId: number,
    params?: GetMovieMovieIdReviewsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdReviews200>({
        url: `/movie/${movieId}/reviews`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdReviewsQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdReviewsParams,
) => {
    return [`/movie/${movieId}/reviews`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdReviewsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdReviews>>,
    TError = ErrorType<GetMovieMovieIdReviews401 | GetMovieMovieIdReviews404>,
>(
    movieId: number,
    params?: GetMovieMovieIdReviewsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdReviews>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdReviewsQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdReviews>>
    > = ({signal}) => getMovieMovieIdReviews(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdReviews>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdReviewsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdReviews>>
>
export type GetMovieMovieIdReviewsQueryError = ErrorType<
    GetMovieMovieIdReviews401 | GetMovieMovieIdReviews404
>

/**
 * @summary Get Reviews
 */
export const useGetMovieMovieIdReviews = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdReviews>>,
    TError = ErrorType<GetMovieMovieIdReviews401 | GetMovieMovieIdReviews404>,
>(
    movieId: number,
    params?: GetMovieMovieIdReviewsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdReviews>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdReviewsQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the cast and crew for a movie.
 * @summary Get Credits
 */
export const getMovieMovieIdCredits = (
    movieId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdCredits200>({
        url: `/movie/${movieId}/credits`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieMovieIdCreditsQueryKey = (movieId: number) => {
    return [`/movie/${movieId}/credits`] as const
}

export const getGetMovieMovieIdCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdCredits>>,
    TError = ErrorType<GetMovieMovieIdCredits401 | GetMovieMovieIdCredits404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetMovieMovieIdCreditsQueryKey(movieId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdCredits>>
    > = ({signal}) => getMovieMovieIdCredits(movieId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdCredits>>
>
export type GetMovieMovieIdCreditsQueryError = ErrorType<
    GetMovieMovieIdCredits401 | GetMovieMovieIdCredits404
>

/**
 * @summary Get Credits
 */
export const useGetMovieMovieIdCredits = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdCredits>>,
    TError = ErrorType<GetMovieMovieIdCredits401 | GetMovieMovieIdCredits404>,
>(
    movieId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdCreditsQueryOptions(movieId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images that belong to a movie.

Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
 * @summary Get Images
 */
export const getMovieMovieIdImages = (
    movieId: number,
    params?: GetMovieMovieIdImagesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetMovieMovieIdImages200>({
        url: `/movie/${movieId}/images`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetMovieMovieIdImagesQueryKey = (
    movieId: number,
    params?: GetMovieMovieIdImagesParams,
) => {
    return [`/movie/${movieId}/images`, ...(params ? [params] : [])] as const
}

export const getGetMovieMovieIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdImages>>,
    TError = ErrorType<GetMovieMovieIdImages401 | GetMovieMovieIdImages404>,
>(
    movieId: number,
    params?: GetMovieMovieIdImagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMovieMovieIdImagesQueryKey(movieId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieMovieIdImages>>
    > = ({signal}) => getMovieMovieIdImages(movieId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!movieId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieMovieIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieMovieIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieMovieIdImages>>
>
export type GetMovieMovieIdImagesQueryError = ErrorType<
    GetMovieMovieIdImages401 | GetMovieMovieIdImages404
>

/**
 * @summary Get Images
 */
export const useGetMovieMovieIdImages = <
    TData = Awaited<ReturnType<typeof getMovieMovieIdImages>>,
    TError = ErrorType<GetMovieMovieIdImages401 | GetMovieMovieIdImages404>,
>(
    movieId: number,
    params?: GetMovieMovieIdImagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getMovieMovieIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieMovieIdImagesQueryOptions(
        movieId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.

You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
 * @summary Get Now Playing
 */
export const getMovieNowPlaying = (signal?: AbortSignal) => {
    return TMDBInstance<GetMovieNowPlaying200>({
        url: `/movie/now_playing`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieNowPlayingQueryKey = () => {
    return [`/movie/now_playing`] as const
}

export const getGetMovieNowPlayingQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieNowPlaying>>,
    TError = ErrorType<GetMovieNowPlaying401 | GetMovieNowPlaying404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieNowPlaying>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMovieNowPlayingQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieNowPlaying>>
    > = ({signal}) => getMovieNowPlaying(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieNowPlaying>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieNowPlayingQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieNowPlaying>>
>
export type GetMovieNowPlayingQueryError = ErrorType<
    GetMovieNowPlaying401 | GetMovieNowPlaying404
>

/**
 * @summary Get Now Playing
 */
export const useGetMovieNowPlaying = <
    TData = Awaited<ReturnType<typeof getMovieNowPlaying>>,
    TError = ErrorType<GetMovieNowPlaying401 | GetMovieNowPlaying404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieNowPlaying>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieNowPlayingQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the current popular movies on TMDB. This list updates daily.
 * @summary Get Popular
 */
export const getMoviePopular = (signal?: AbortSignal) => {
    return TMDBInstance<GetMoviePopular200>({
        url: `/movie/popular`,
        method: 'GET',
        signal,
    })
}

export const getGetMoviePopularQueryKey = () => {
    return [`/movie/popular`] as const
}

export const getGetMoviePopularQueryOptions = <
    TData = Awaited<ReturnType<typeof getMoviePopular>>,
    TError = ErrorType<GetMoviePopular401 | GetMoviePopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMoviePopular>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMoviePopularQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMoviePopular>>
    > = ({signal}) => getMoviePopular(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMoviePopular>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMoviePopularQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMoviePopular>>
>
export type GetMoviePopularQueryError = ErrorType<
    GetMoviePopular401 | GetMoviePopular404
>

/**
 * @summary Get Popular
 */
export const useGetMoviePopular = <
    TData = Awaited<ReturnType<typeof getMoviePopular>>,
    TError = ErrorType<GetMoviePopular401 | GetMoviePopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMoviePopular>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMoviePopularQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.

You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
 * @summary Get Upcoming
 */
export const getMovieUpcoming = (signal?: AbortSignal) => {
    return TMDBInstance<GetMovieUpcoming200>({
        url: `/movie/upcoming`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieUpcomingQueryKey = () => {
    return [`/movie/upcoming`] as const
}

export const getGetMovieUpcomingQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieUpcoming>>,
    TError = ErrorType<GetMovieUpcoming401 | GetMovieUpcoming404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieUpcoming>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMovieUpcomingQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieUpcoming>>
    > = ({signal}) => getMovieUpcoming(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieUpcoming>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieUpcomingQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieUpcoming>>
>
export type GetMovieUpcomingQueryError = ErrorType<
    GetMovieUpcoming401 | GetMovieUpcoming404
>

/**
 * @summary Get Upcoming
 */
export const useGetMovieUpcoming = <
    TData = Awaited<ReturnType<typeof getMovieUpcoming>>,
    TError = ErrorType<GetMovieUpcoming401 | GetMovieUpcoming404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieUpcoming>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieUpcomingQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the most newly created movie. This is a live response and will continuously change.
 * @summary Get Latest
 */
export const getMovieLatest = (signal?: AbortSignal) => {
    return TMDBInstance<GetMovieLatest200>({
        url: `/movie/latest`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieLatestQueryKey = () => {
    return [`/movie/latest`] as const
}

export const getGetMovieLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieLatest>>,
    TError = ErrorType<GetMovieLatest401 | GetMovieLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieLatest>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMovieLatestQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieLatest>>
    > = ({signal}) => getMovieLatest(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieLatest>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieLatest>>
>
export type GetMovieLatestQueryError = ErrorType<
    GetMovieLatest401 | GetMovieLatest404
>

/**
 * @summary Get Latest
 */
export const useGetMovieLatest = <
    TData = Awaited<ReturnType<typeof getMovieLatest>>,
    TError = ErrorType<GetMovieLatest401 | GetMovieLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieLatest>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieLatestQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the top rated movies on TMDB.
 * @summary Get Top Rated
 */
export const getMovieTopRated = (signal?: AbortSignal) => {
    return TMDBInstance<GetMovieTopRated200>({
        url: `/movie/top_rated`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieTopRatedQueryKey = () => {
    return [`/movie/top_rated`] as const
}

export const getGetMovieTopRatedQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieTopRated>>,
    TError = ErrorType<GetMovieTopRated401 | GetMovieTopRated404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieTopRated>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMovieTopRatedQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieTopRated>>
    > = ({signal}) => getMovieTopRated(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieTopRated>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieTopRatedQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieTopRated>>
>
export type GetMovieTopRatedQueryError = ErrorType<
    GetMovieTopRated401 | GetMovieTopRated404
>

/**
 * @summary Get Top Rated
 */
export const useGetMovieTopRated = <
    TData = Awaited<ReturnType<typeof getMovieTopRated>>,
    TError = ErrorType<GetMovieTopRated401 | GetMovieTopRated404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieTopRated>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieTopRatedQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get  a list of all of the movie ids that have been changed in the past 24 hours.

You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
 * @summary Get Movie Change List
 */
export const getMovieChanges = (signal?: AbortSignal) => {
    return TMDBInstance<GetMovieChanges200>({
        url: `/movie/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetMovieChangesQueryKey = () => {
    return [`/movie/changes`] as const
}

export const getGetMovieChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getMovieChanges>>,
    TError = ErrorType<GetMovieChanges401 | GetMovieChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieChanges>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMovieChangesQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMovieChanges>>
    > = ({signal}) => getMovieChanges(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getMovieChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetMovieChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMovieChanges>>
>
export type GetMovieChangesQueryError = ErrorType<
    GetMovieChanges401 | GetMovieChanges404
>

/**
 * @summary Get Movie Change List
 */
export const useGetMovieChanges = <
    TData = Awaited<ReturnType<typeof getMovieChanges>>,
    TError = ErrorType<GetMovieChanges401 | GetMovieChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getMovieChanges>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetMovieChangesQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the system wide configuration information. Some elements of the API require some knowledge of this configuration data. The purpose of this is to try and keep the actual API responses as light as possible. It is recommended you cache this data within your application and check for updates every few days.

This method currently holds the data relevant to building image URLs as well as the change key map.

To build an image URL, you will need 3 pieces of data. The `base_url`, `size` and `file_path`. Simply combine them all and you will have a fully qualified URL. Here’s an example URL:

    https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg

The configuration method also contains the list of change keys which can be useful if you are building an app that consumes data from the change feed.
 * @summary Get API Configuration
 */
export const getConfiguration = (
    params?: GetConfigurationParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfiguration200>({
        url: `/configuration`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationQueryKey = (
    params?: GetConfigurationParams,
) => {
    return [`/configuration`, ...(params ? [params] : [])] as const
}

export const getGetConfigurationQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfiguration>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfiguration>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetConfigurationQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfiguration>>
    > = ({signal}) => getConfiguration(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfiguration>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfiguration>>
>
export type GetConfigurationQueryError = ErrorType<unknown>

/**
 * @summary Get API Configuration
 */
export const useGetConfiguration = <
    TData = Awaited<ReturnType<typeof getConfiguration>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfiguration>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the jobs and departments we use on TMDB.
 * @summary Get Jobs
 */
export const getConfigurationJobs = (
    params?: GetConfigurationJobsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfigurationJobs200>({
        url: `/configuration/jobs`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationJobsQueryKey = (
    params?: GetConfigurationJobsParams,
) => {
    return [`/configuration/jobs`, ...(params ? [params] : [])] as const
}

export const getGetConfigurationJobsQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfigurationJobs>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationJobsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationJobs>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetConfigurationJobsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfigurationJobs>>
    > = ({signal}) => getConfigurationJobs(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfigurationJobs>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationJobsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfigurationJobs>>
>
export type GetConfigurationJobsQueryError = ErrorType<unknown>

/**
 * @summary Get Jobs
 */
export const useGetConfigurationJobs = <
    TData = Awaited<ReturnType<typeof getConfigurationJobs>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationJobsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationJobs>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationJobsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of timezones used throughout TMDB.
 * @summary Get Timezones
 */
export const getConfigurationTimezones = (
    params?: GetConfigurationTimezonesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfigurationTimezones200>({
        url: `/configuration/timezones`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationTimezonesQueryKey = (
    params?: GetConfigurationTimezonesParams,
) => {
    return [`/configuration/timezones`, ...(params ? [params] : [])] as const
}

export const getGetConfigurationTimezonesQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfigurationTimezones>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationTimezonesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationTimezones>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetConfigurationTimezonesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfigurationTimezones>>
    > = ({signal}) => getConfigurationTimezones(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfigurationTimezones>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationTimezonesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfigurationTimezones>>
>
export type GetConfigurationTimezonesQueryError = ErrorType<unknown>

/**
 * @summary Get Timezones
 */
export const useGetConfigurationTimezones = <
    TData = Awaited<ReturnType<typeof getConfigurationTimezones>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationTimezonesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationTimezones>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationTimezonesQueryOptions(
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
 * @summary Get Countries
 */
export const getConfigurationCountries = (
    params?: GetConfigurationCountriesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfigurationCountries200>({
        url: `/configuration/countries`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationCountriesQueryKey = (
    params?: GetConfigurationCountriesParams,
) => {
    return [`/configuration/countries`, ...(params ? [params] : [])] as const
}

export const getGetConfigurationCountriesQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfigurationCountries>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationCountriesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationCountries>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetConfigurationCountriesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfigurationCountries>>
    > = ({signal}) => getConfigurationCountries(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfigurationCountries>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationCountriesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfigurationCountries>>
>
export type GetConfigurationCountriesQueryError = ErrorType<unknown>

/**
 * @summary Get Countries
 */
export const useGetConfigurationCountries = <
    TData = Awaited<ReturnType<typeof getConfigurationCountries>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationCountriesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationCountries>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationCountriesQueryOptions(
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of the _officially_ supported translations on TMDB.

While it's technically possible to add a translation in any one of the [languages](#endpoint:tem8QfFFyAfWodrCv) we have added to TMDB (we don't restrict content), the ones listed in this method are the ones we also support for localizing the website with which means they are what we refer to as the "primary" translations.

These are all specified as [IETF tags](https://en.wikipedia.org/wiki/IETF_language_tag) to identify the languages we use on TMDB. There is one exception which is image languages. They are currently only designated by a ISO-639-1 tag. This is a planned upgrade for the future.

We're always open to adding more if you think one should be added. You can ask about getting a new primary translation added by posting on [the forums](https://www.themoviedb.org/talk/category/5047951f760ee3318900009a).

One more thing to mention, these are the translations that map to our website translation project. You can view and contribute to that project [here](https://www.localeapp.com/projects/8267).
 * @summary Get Primary Translations
 */
export const getConfigurationPrimaryTranslations = (
    params?: GetConfigurationPrimaryTranslationsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfigurationPrimaryTranslations200>({
        url: `/configuration/primary_translations`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationPrimaryTranslationsQueryKey = (
    params?: GetConfigurationPrimaryTranslationsParams,
) => {
    return [
        `/configuration/primary_translations`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetConfigurationPrimaryTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationPrimaryTranslationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetConfigurationPrimaryTranslationsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>
    > = ({signal}) => getConfigurationPrimaryTranslations(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationPrimaryTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>
>
export type GetConfigurationPrimaryTranslationsQueryError = ErrorType<unknown>

/**
 * @summary Get Primary Translations
 */
export const useGetConfigurationPrimaryTranslations = <
    TData = Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationPrimaryTranslationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationPrimaryTranslations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationPrimaryTranslationsQueryOptions(
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
 * @summary Get Languages
 */
export const getConfigurationLanguages = (
    params?: GetConfigurationLanguagesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetConfigurationLanguages200>({
        url: `/configuration/languages`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetConfigurationLanguagesQueryKey = (
    params?: GetConfigurationLanguagesParams,
) => {
    return [`/configuration/languages`, ...(params ? [params] : [])] as const
}

export const getGetConfigurationLanguagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getConfigurationLanguages>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationLanguagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationLanguages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetConfigurationLanguagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getConfigurationLanguages>>
    > = ({signal}) => getConfigurationLanguages(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getConfigurationLanguages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetConfigurationLanguagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getConfigurationLanguages>>
>
export type GetConfigurationLanguagesQueryError = ErrorType<unknown>

/**
 * @summary Get Languages
 */
export const useGetConfigurationLanguages = <
    TData = Awaited<ReturnType<typeof getConfigurationLanguages>>,
    TError = ErrorType<unknown>,
>(
    params?: GetConfigurationLanguagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getConfigurationLanguages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetConfigurationLanguagesQueryOptions(
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a companies details by id.
 * @summary Get Details
 */
export const getCompanyCompanyId = (
    companyId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCompanyCompanyId200>({
        url: `/company/${companyId}`,
        method: 'GET',
        signal,
    })
}

export const getGetCompanyCompanyIdQueryKey = (companyId: number) => {
    return [`/company/${companyId}`] as const
}

export const getGetCompanyCompanyIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyId>>,
    TError = ErrorType<GetCompanyCompanyId401 | GetCompanyCompanyId404>,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetCompanyCompanyIdQueryKey(companyId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCompanyCompanyId>>
    > = ({signal}) => getCompanyCompanyId(companyId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!companyId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCompanyCompanyId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCompanyCompanyIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCompanyCompanyId>>
>
export type GetCompanyCompanyIdQueryError = ErrorType<
    GetCompanyCompanyId401 | GetCompanyCompanyId404
>

/**
 * @summary Get Details
 */
export const useGetCompanyCompanyId = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyId>>,
    TError = ErrorType<GetCompanyCompanyId401 | GetCompanyCompanyId404>,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCompanyCompanyIdQueryOptions(companyId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a companies logos by id.

There are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.

For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
 * @summary Get Images
 */
export const getCompanyCompanyIdImages = (
    companyId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCompanyCompanyIdImages200>({
        url: `/company/${companyId}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetCompanyCompanyIdImagesQueryKey = (companyId: number) => {
    return [`/company/${companyId}/images`] as const
}

export const getGetCompanyCompanyIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyIdImages>>,
    TError = ErrorType<
        GetCompanyCompanyIdImages401 | GetCompanyCompanyIdImages404
    >,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetCompanyCompanyIdImagesQueryKey(companyId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCompanyCompanyIdImages>>
    > = ({signal}) => getCompanyCompanyIdImages(companyId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!companyId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCompanyCompanyIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCompanyCompanyIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCompanyCompanyIdImages>>
>
export type GetCompanyCompanyIdImagesQueryError = ErrorType<
    GetCompanyCompanyIdImages401 | GetCompanyCompanyIdImages404
>

/**
 * @summary Get Images
 */
export const useGetCompanyCompanyIdImages = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyIdImages>>,
    TError = ErrorType<
        GetCompanyCompanyIdImages401 | GetCompanyCompanyIdImages404
    >,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCompanyCompanyIdImagesQueryOptions(
        companyId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the alternative names of a company.
 * @summary Get Alternative Names
 */
export const getCompanyCompanyIdAlternativeNames = (
    companyId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCompanyCompanyIdAlternativeNames200>({
        url: `/company/${companyId}/alternative_names`,
        method: 'GET',
        signal,
    })
}

export const getGetCompanyCompanyIdAlternativeNamesQueryKey = (
    companyId: number,
) => {
    return [`/company/${companyId}/alternative_names`] as const
}

export const getGetCompanyCompanyIdAlternativeNamesQueryOptions = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>,
    TError = ErrorType<
        | GetCompanyCompanyIdAlternativeNames401
        | GetCompanyCompanyIdAlternativeNames404
    >,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetCompanyCompanyIdAlternativeNamesQueryKey(companyId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>
    > = ({signal}) => getCompanyCompanyIdAlternativeNames(companyId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!companyId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCompanyCompanyIdAlternativeNamesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>
>
export type GetCompanyCompanyIdAlternativeNamesQueryError = ErrorType<
    | GetCompanyCompanyIdAlternativeNames401
    | GetCompanyCompanyIdAlternativeNames404
>

/**
 * @summary Get Alternative Names
 */
export const useGetCompanyCompanyIdAlternativeNames = <
    TData = Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>,
    TError = ErrorType<
        | GetCompanyCompanyIdAlternativeNames401
        | GetCompanyCompanyIdAlternativeNames404
    >,
>(
    companyId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCompanyCompanyIdAlternativeNames>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCompanyCompanyIdAlternativeNamesQueryOptions(
        companyId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for keywords.
 * @summary Search Keywords
 */
export const getSearchKeyword = (signal?: AbortSignal) => {
    return TMDBInstance<GetSearchKeyword200>({
        url: `/search/keyword`,
        method: 'GET',
        signal,
    })
}

export const getGetSearchKeywordQueryKey = () => {
    return [`/search/keyword`] as const
}

export const getGetSearchKeywordQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchKeyword>>,
    TError = ErrorType<GetSearchKeyword401 | GetSearchKeyword404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchKeyword>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchKeywordQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchKeyword>>
    > = ({signal}) => getSearchKeyword(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchKeyword>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchKeywordQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchKeyword>>
>
export type GetSearchKeywordQueryError = ErrorType<
    GetSearchKeyword401 | GetSearchKeyword404
>

/**
 * @summary Search Keywords
 */
export const useGetSearchKeyword = <
    TData = Awaited<ReturnType<typeof getSearchKeyword>>,
    TError = ErrorType<GetSearchKeyword401 | GetSearchKeyword404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchKeyword>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchKeywordQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for people.
 * @summary Search People
 */
export const getSearchPerson = (signal?: AbortSignal) => {
    return TMDBInstance<GetSearchPerson200>({
        url: `/search/person`,
        method: 'GET',
        signal,
    })
}

export const getGetSearchPersonQueryKey = () => {
    return [`/search/person`] as const
}

export const getGetSearchPersonQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchPerson>>,
    TError = ErrorType<GetSearchPerson401 | GetSearchPerson404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchPerson>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchPersonQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchPerson>>
    > = ({signal}) => getSearchPerson(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchPerson>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchPersonQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchPerson>>
>
export type GetSearchPersonQueryError = ErrorType<
    GetSearchPerson401 | GetSearchPerson404
>

/**
 * @summary Search People
 */
export const useGetSearchPerson = <
    TData = Awaited<ReturnType<typeof getSearchPerson>>,
    TError = ErrorType<GetSearchPerson401 | GetSearchPerson404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchPerson>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchPersonQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for collections.
 * @summary Search Collections
 */
export const getSearchCollection = (signal?: AbortSignal) => {
    return TMDBInstance<GetSearchCollection200>({
        url: `/search/collection`,
        method: 'GET',
        signal,
    })
}

export const getGetSearchCollectionQueryKey = () => {
    return [`/search/collection`] as const
}

export const getGetSearchCollectionQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchCollection>>,
    TError = ErrorType<GetSearchCollection401 | GetSearchCollection404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchCollection>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchCollectionQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchCollection>>
    > = ({signal}) => getSearchCollection(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCollection>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchCollectionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchCollection>>
>
export type GetSearchCollectionQueryError = ErrorType<
    GetSearchCollection401 | GetSearchCollection404
>

/**
 * @summary Search Collections
 */
export const useGetSearchCollection = <
    TData = Awaited<ReturnType<typeof getSearchCollection>>,
    TError = ErrorType<GetSearchCollection401 | GetSearchCollection404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchCollection>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchCollectionQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for companies.
 * @summary Search Companies
 */
export const getSearchCompany = (signal?: AbortSignal) => {
    return TMDBInstance<GetSearchCompany200>({
        url: `/search/company`,
        method: 'GET',
        signal,
    })
}

export const getGetSearchCompanyQueryKey = () => {
    return [`/search/company`] as const
}

export const getGetSearchCompanyQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchCompany>>,
    TError = ErrorType<GetSearchCompany401 | GetSearchCompany404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchCompany>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchCompanyQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchCompany>>
    > = ({signal}) => getSearchCompany(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompany>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchCompanyQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchCompany>>
>
export type GetSearchCompanyQueryError = ErrorType<
    GetSearchCompany401 | GetSearchCompany404
>

/**
 * @summary Search Companies
 */
export const useGetSearchCompany = <
    TData = Awaited<ReturnType<typeof getSearchCompany>>,
    TError = ErrorType<GetSearchCompany401 | GetSearchCompany404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchCompany>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchCompanyQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for a TV show.
 * @summary Search TV Shows
 */
export const getSearchTv = (
    params?: GetSearchTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetSearchTv200>({
        url: `/search/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetSearchTvQueryKey = (params?: GetSearchTvParams) => {
    return [`/search/tv`, ...(params ? [params] : [])] as const
}

export const getGetSearchTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchTv>>,
    TError = ErrorType<GetSearchTv401 | GetSearchTv404>,
>(
    params?: GetSearchTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getSearchTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchTvQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSearchTv>>> = ({
        signal,
    }) => getSearchTv(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchTv>>
>
export type GetSearchTvQueryError = ErrorType<GetSearchTv401 | GetSearchTv404>

/**
 * @summary Search TV Shows
 */
export const useGetSearchTv = <
    TData = Awaited<ReturnType<typeof getSearchTv>>,
    TError = ErrorType<GetSearchTv401 | GetSearchTv404>,
>(
    params?: GetSearchTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getSearchTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchTvQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search for movies.
 * @summary Search Movies
 */
export const getSearchMovie = (
    params?: GetSearchMovieParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetSearchMovie200>({
        url: `/search/movie`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetSearchMovieQueryKey = (params?: GetSearchMovieParams) => {
    return [`/search/movie`, ...(params ? [params] : [])] as const
}

export const getGetSearchMovieQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchMovie>>,
    TError = ErrorType<GetSearchMovie401 | GetSearchMovie404>,
>(
    params?: GetSearchMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getSearchMovie>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchMovieQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchMovie>>
    > = ({signal}) => getSearchMovie(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchMovie>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchMovieQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchMovie>>
>
export type GetSearchMovieQueryError = ErrorType<
    GetSearchMovie401 | GetSearchMovie404
>

/**
 * @summary Search Movies
 */
export const useGetSearchMovie = <
    TData = Awaited<ReturnType<typeof getSearchMovie>>,
    TError = ErrorType<GetSearchMovie401 | GetSearchMovie404>,
>(
    params?: GetSearchMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getSearchMovie>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchMovieQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Search multiple models in a single request. Multi search currently supports searching for movies, tv shows and people in a single request.
 * @summary Multi Search
 */
export const getSearchMulti = (signal?: AbortSignal) => {
    return TMDBInstance<GetSearchMulti200>({
        url: `/search/multi`,
        method: 'GET',
        signal,
    })
}

export const getGetSearchMultiQueryKey = () => {
    return [`/search/multi`] as const
}

export const getGetSearchMultiQueryOptions = <
    TData = Awaited<ReturnType<typeof getSearchMulti>>,
    TError = ErrorType<GetSearchMulti401 | GetSearchMulti404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchMulti>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchMultiQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getSearchMulti>>
    > = ({signal}) => getSearchMulti(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getSearchMulti>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetSearchMultiQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchMulti>>
>
export type GetSearchMultiQueryError = ErrorType<
    GetSearchMulti401 | GetSearchMulti404
>

/**
 * @summary Multi Search
 */
export const useGetSearchMulti = <
    TData = Awaited<ReturnType<typeof getSearchMulti>>,
    TError = ErrorType<GetSearchMulti401 | GetSearchMulti404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getSearchMulti>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetSearchMultiQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Add a movie or TV show to your watchlist.
 * @summary Add to Watchlist
 */
export const postAccountAccountIdWatchlist = (
    accountId: number,
    postAccountAccountIdWatchlistBody: string,
    params?: PostAccountAccountIdWatchlistParams,
) => {
    return TMDBInstance<PostAccountAccountIdWatchlist201>({
        url: `/account/${accountId}/watchlist`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postAccountAccountIdWatchlistBody,
        params,
    })
}

export const getPostAccountAccountIdWatchlistMutationOptions = <
    TError = ErrorType<
        PostAccountAccountIdWatchlist401 | PostAccountAccountIdWatchlist404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAccountAccountIdWatchlist>>,
        TError,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdWatchlistParams
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postAccountAccountIdWatchlist>>,
    TError,
    {
        accountId: number
        data: string
        params?: PostAccountAccountIdWatchlistParams
    },
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAccountAccountIdWatchlist>>,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdWatchlistParams
        }
    > = (props) => {
        const {accountId, data, params} = props ?? {}

        return postAccountAccountIdWatchlist(accountId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostAccountAccountIdWatchlistMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAccountAccountIdWatchlist>>
>
export type PostAccountAccountIdWatchlistMutationBody = string
export type PostAccountAccountIdWatchlistMutationError = ErrorType<
    PostAccountAccountIdWatchlist401 | PostAccountAccountIdWatchlist404
>

/**
 * @summary Add to Watchlist
 */
export const usePostAccountAccountIdWatchlist = <
    TError = ErrorType<
        PostAccountAccountIdWatchlist401 | PostAccountAccountIdWatchlist404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAccountAccountIdWatchlist>>,
        TError,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdWatchlistParams
        },
        TContext
    >
}) => {
    const mutationOptions =
        getPostAccountAccountIdWatchlistMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Get a list of all the TV shows you have added to your watchlist.
 * @summary Get TV Show Watchlist
 */
export const getAccountAccountIdWatchlistTv = (
    accountId: number,
    params?: GetAccountAccountIdWatchlistTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdWatchlistTv200>({
        url: `/account/${accountId}/watchlist/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdWatchlistTvQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdWatchlistTvParams,
) => {
    return [
        `/account/${accountId}/watchlist/tv`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdWatchlistTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>,
    TError = ErrorType<
        GetAccountAccountIdWatchlistTv401 | GetAccountAccountIdWatchlistTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdWatchlistTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdWatchlistTvQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>
    > = ({signal}) => getAccountAccountIdWatchlistTv(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdWatchlistTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>
>
export type GetAccountAccountIdWatchlistTvQueryError = ErrorType<
    GetAccountAccountIdWatchlistTv401 | GetAccountAccountIdWatchlistTv404
>

/**
 * @summary Get TV Show Watchlist
 */
export const useGetAccountAccountIdWatchlistTv = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>,
    TError = ErrorType<
        GetAccountAccountIdWatchlistTv401 | GetAccountAccountIdWatchlistTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdWatchlistTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdWatchlistTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdWatchlistTvQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all the movies you have added to your watchlist.
 * @summary Get Movie Watchlist
 */
export const getAccountAccountIdWatchlistMovies = (
    accountId: number,
    params?: GetAccountAccountIdWatchlistMoviesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdWatchlistMovies200>({
        url: `/account/${accountId}/watchlist/movies`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdWatchlistMoviesQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdWatchlistMoviesParams,
) => {
    return [
        `/account/${accountId}/watchlist/movies`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdWatchlistMoviesQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>,
    TError = ErrorType<
        | GetAccountAccountIdWatchlistMovies401
        | GetAccountAccountIdWatchlistMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdWatchlistMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdWatchlistMoviesQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>
    > = ({signal}) =>
        getAccountAccountIdWatchlistMovies(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdWatchlistMoviesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>
>
export type GetAccountAccountIdWatchlistMoviesQueryError = ErrorType<
    | GetAccountAccountIdWatchlistMovies401
    | GetAccountAccountIdWatchlistMovies404
>

/**
 * @summary Get Movie Watchlist
 */
export const useGetAccountAccountIdWatchlistMovies = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>,
    TError = ErrorType<
        | GetAccountAccountIdWatchlistMovies401
        | GetAccountAccountIdWatchlistMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdWatchlistMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdWatchlistMovies>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdWatchlistMoviesQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * This method allows you to mark a movie or TV show as a favorite item.
 * @summary Mark as Favorite
 */
export const postAccountAccountIdFavorite = (
    accountId: number,
    postAccountAccountIdFavoriteBody: string,
    params?: PostAccountAccountIdFavoriteParams,
) => {
    return TMDBInstance<PostAccountAccountIdFavorite201>({
        url: `/account/${accountId}/favorite`,
        method: 'POST',
        headers: {'Content-Type': '*/*'},
        data: postAccountAccountIdFavoriteBody,
        params,
    })
}

export const getPostAccountAccountIdFavoriteMutationOptions = <
    TError = ErrorType<
        PostAccountAccountIdFavorite401 | PostAccountAccountIdFavorite404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAccountAccountIdFavorite>>,
        TError,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdFavoriteParams
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof postAccountAccountIdFavorite>>,
    TError,
    {
        accountId: number
        data: string
        params?: PostAccountAccountIdFavoriteParams
    },
    TContext
> => {
    const {mutation: mutationOptions} = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAccountAccountIdFavorite>>,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdFavoriteParams
        }
    > = (props) => {
        const {accountId, data, params} = props ?? {}

        return postAccountAccountIdFavorite(accountId, data, params)
    }

    return {mutationFn, ...mutationOptions}
}

export type PostAccountAccountIdFavoriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAccountAccountIdFavorite>>
>
export type PostAccountAccountIdFavoriteMutationBody = string
export type PostAccountAccountIdFavoriteMutationError = ErrorType<
    PostAccountAccountIdFavorite401 | PostAccountAccountIdFavorite404
>

/**
 * @summary Mark as Favorite
 */
export const usePostAccountAccountIdFavorite = <
    TError = ErrorType<
        PostAccountAccountIdFavorite401 | PostAccountAccountIdFavorite404
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAccountAccountIdFavorite>>,
        TError,
        {
            accountId: number
            data: string
            params?: PostAccountAccountIdFavoriteParams
        },
        TContext
    >
}) => {
    const mutationOptions =
        getPostAccountAccountIdFavoriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * Get the list of your favorite TV shows.
 * @summary Get Favorite TV Shows
 */
export const getAccountAccountIdFavoriteTv = (
    accountId: number,
    params?: GetAccountAccountIdFavoriteTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdFavoriteTv200>({
        url: `/account/${accountId}/favorite/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdFavoriteTvQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdFavoriteTvParams,
) => {
    return [
        `/account/${accountId}/favorite/tv`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdFavoriteTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>,
    TError = ErrorType<
        GetAccountAccountIdFavoriteTv401 | GetAccountAccountIdFavoriteTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdFavoriteTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdFavoriteTvQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>
    > = ({signal}) => getAccountAccountIdFavoriteTv(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdFavoriteTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>
>
export type GetAccountAccountIdFavoriteTvQueryError = ErrorType<
    GetAccountAccountIdFavoriteTv401 | GetAccountAccountIdFavoriteTv404
>

/**
 * @summary Get Favorite TV Shows
 */
export const useGetAccountAccountIdFavoriteTv = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>,
    TError = ErrorType<
        GetAccountAccountIdFavoriteTv401 | GetAccountAccountIdFavoriteTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdFavoriteTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdFavoriteTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdFavoriteTvQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of your favorite movies.
 * @summary Get Favorite Movies
 */
export const getAccountAccountIdFavoriteMovies = (
    accountId: number,
    params?: GetAccountAccountIdFavoriteMoviesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdFavoriteMovies200>({
        url: `/account/${accountId}/favorite/movies`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdFavoriteMoviesQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdFavoriteMoviesParams,
) => {
    return [
        `/account/${accountId}/favorite/movies`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdFavoriteMoviesQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>,
    TError = ErrorType<
        | GetAccountAccountIdFavoriteMovies401
        | GetAccountAccountIdFavoriteMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdFavoriteMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdFavoriteMoviesQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>
    > = ({signal}) =>
        getAccountAccountIdFavoriteMovies(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdFavoriteMoviesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>
>
export type GetAccountAccountIdFavoriteMoviesQueryError = ErrorType<
    GetAccountAccountIdFavoriteMovies401 | GetAccountAccountIdFavoriteMovies404
>

/**
 * @summary Get Favorite Movies
 */
export const useGetAccountAccountIdFavoriteMovies = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>,
    TError = ErrorType<
        | GetAccountAccountIdFavoriteMovies401
        | GetAccountAccountIdFavoriteMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdFavoriteMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdFavoriteMovies>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdFavoriteMoviesQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all the TV shows you have rated.
 * @summary Get Rated TV Shows
 */
export const getAccountAccountIdRatedTv = (
    accountId: number,
    params?: GetAccountAccountIdRatedTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdRatedTv200>({
        url: `/account/${accountId}/rated/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdRatedTvQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdRatedTvParams,
) => {
    return [
        `/account/${accountId}/rated/tv`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdRatedTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>,
    TError = ErrorType<
        GetAccountAccountIdRatedTv401 | GetAccountAccountIdRatedTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdRatedTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdRatedTvQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>
    > = ({signal}) => getAccountAccountIdRatedTv(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdRatedTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>
>
export type GetAccountAccountIdRatedTvQueryError = ErrorType<
    GetAccountAccountIdRatedTv401 | GetAccountAccountIdRatedTv404
>

/**
 * @summary Get Rated TV Shows
 */
export const useGetAccountAccountIdRatedTv = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>,
    TError = ErrorType<
        GetAccountAccountIdRatedTv401 | GetAccountAccountIdRatedTv404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdRatedTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdRatedTvQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all the TV episodes you have rated.
 * @summary Get Rated TV Episodes
 */
export const getAccountAccountIdRatedTvEpisodes = (
    accountId: string,
    params?: GetAccountAccountIdRatedTvEpisodesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdRatedTvEpisodes200>({
        url: `/account/${accountId}/rated/tv/episodes`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdRatedTvEpisodesQueryKey = (
    accountId: string,
    params?: GetAccountAccountIdRatedTvEpisodesParams,
) => {
    return [
        `/account/${accountId}/rated/tv/episodes`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdRatedTvEpisodesQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>,
    TError = ErrorType<
        | GetAccountAccountIdRatedTvEpisodes401
        | GetAccountAccountIdRatedTvEpisodes404
    >,
>(
    accountId: string,
    params?: GetAccountAccountIdRatedTvEpisodesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdRatedTvEpisodesQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>
    > = ({signal}) =>
        getAccountAccountIdRatedTvEpisodes(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdRatedTvEpisodesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>
>
export type GetAccountAccountIdRatedTvEpisodesQueryError = ErrorType<
    | GetAccountAccountIdRatedTvEpisodes401
    | GetAccountAccountIdRatedTvEpisodes404
>

/**
 * @summary Get Rated TV Episodes
 */
export const useGetAccountAccountIdRatedTvEpisodes = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>,
    TError = ErrorType<
        | GetAccountAccountIdRatedTvEpisodes401
        | GetAccountAccountIdRatedTvEpisodes404
    >,
>(
    accountId: string,
    params?: GetAccountAccountIdRatedTvEpisodesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedTvEpisodes>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdRatedTvEpisodesQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all the movies you have rated.
 * @summary Get Rated Movies
 */
export const getAccountAccountIdRatedMovies = (
    accountId: number,
    params?: GetAccountAccountIdRatedMoviesParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdRatedMovies200>({
        url: `/account/${accountId}/rated/movies`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdRatedMoviesQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdRatedMoviesParams,
) => {
    return [
        `/account/${accountId}/rated/movies`,
        ...(params ? [params] : []),
    ] as const
}

export const getGetAccountAccountIdRatedMoviesQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>,
    TError = ErrorType<
        GetAccountAccountIdRatedMovies401 | GetAccountAccountIdRatedMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdRatedMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdRatedMoviesQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>
    > = ({signal}) => getAccountAccountIdRatedMovies(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdRatedMoviesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>
>
export type GetAccountAccountIdRatedMoviesQueryError = ErrorType<
    GetAccountAccountIdRatedMovies401 | GetAccountAccountIdRatedMovies404
>

/**
 * @summary Get Rated Movies
 */
export const useGetAccountAccountIdRatedMovies = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>,
    TError = ErrorType<
        GetAccountAccountIdRatedMovies401 | GetAccountAccountIdRatedMovies404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdRatedMoviesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdRatedMovies>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdRatedMoviesQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get all of the lists created by an account. Will invlude private lists if you are the owner.
 * @summary Get Created Lists
 */
export const getAccountAccountIdLists = (
    accountId: number,
    params?: GetAccountAccountIdListsParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetAccountAccountIdLists200>({
        url: `/account/${accountId}/lists`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountAccountIdListsQueryKey = (
    accountId: number,
    params?: GetAccountAccountIdListsParams,
) => {
    return [`/account/${accountId}/lists`, ...(params ? [params] : [])] as const
}

export const getGetAccountAccountIdListsQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdLists>>,
    TError = ErrorType<
        GetAccountAccountIdLists401 | GetAccountAccountIdLists404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdListsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdLists>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAccountAccountIdListsQueryKey(accountId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAccountAccountIdLists>>
    > = ({signal}) => getAccountAccountIdLists(accountId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!accountId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getAccountAccountIdLists>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountAccountIdListsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccountAccountIdLists>>
>
export type GetAccountAccountIdListsQueryError = ErrorType<
    GetAccountAccountIdLists401 | GetAccountAccountIdLists404
>

/**
 * @summary Get Created Lists
 */
export const useGetAccountAccountIdLists = <
    TData = Awaited<ReturnType<typeof getAccountAccountIdLists>>,
    TError = ErrorType<
        GetAccountAccountIdLists401 | GetAccountAccountIdLists404
    >,
>(
    accountId: number,
    params?: GetAccountAccountIdListsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccountAccountIdLists>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountAccountIdListsQueryOptions(
        accountId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get your account details.
 * @summary Get Details
 */
export const getAccount = (params?: GetAccountParams, signal?: AbortSignal) => {
    return TMDBInstance<GetAccount200>({
        url: `/account`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetAccountQueryKey = (params?: GetAccountParams) => {
    return [`/account`, ...(params ? [params] : [])] as const
}

export const getGetAccountQueryOptions = <
    TData = Awaited<ReturnType<typeof getAccount>>,
    TError = ErrorType<GetAccount401 | GetAccount404>,
>(
    params?: GetAccountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccount>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({
        signal,
    }) => getAccount(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getAccount>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetAccountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAccount>>
>
export type GetAccountQueryError = ErrorType<GetAccount401 | GetAccount404>

/**
 * @summary Get Details
 */
export const useGetAccount = <
    TData = Awaited<ReturnType<typeof getAccount>>,
    TError = ErrorType<GetAccount401 | GetAccount404>,
>(
    params?: GetAccountParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getAccount>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetAccountQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the primary person details by id.

Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 17, 2018 | Added the `known_for_department` field. |
| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |
| November 9, 2016 | Biographies are now translatable on TMDB. This means you can query person details with a language parameter. |
 * @summary Get Details
 */
export const getPersonPersonId = (personId: number, signal?: AbortSignal) => {
    return TMDBInstance<GetPersonPersonId200>({
        url: `/person/${personId}`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdQueryKey = (personId: number) => {
    return [`/person/${personId}`] as const
}

export const getGetPersonPersonIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonId>>,
    TError = ErrorType<GetPersonPersonId401 | GetPersonPersonId404>,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetPersonPersonIdQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonId>>
    > = ({signal}) => getPersonPersonId(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonId>>
>
export type GetPersonPersonIdQueryError = ErrorType<
    GetPersonPersonId401 | GetPersonPersonId404
>

/**
 * @summary Get Details
 */
export const useGetPersonPersonId = <
    TData = Awaited<ReturnType<typeof getPersonPersonId>>,
    TError = ErrorType<GetPersonPersonId401 | GetPersonPersonId404>,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdQueryOptions(personId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the external ids for a person. We currently support the following external sources.

| **External Sources** |
| ------------     |
| IMDB ID          |
| Facebook         |
| Freebase MID     |
| Freebase ID      |
| Instagram        |
| TVRage ID        |
| Twitter          |
 * @summary Get External IDs
 */
export const getPersonPersonIdExternalIds = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdExternalIds200>({
        url: `/person/${personId}/external_ids`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdExternalIdsQueryKey = (personId: number) => {
    return [`/person/${personId}/external_ids`] as const
}

export const getGetPersonPersonIdExternalIdsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>,
    TError = ErrorType<
        GetPersonPersonIdExternalIds401 | GetPersonPersonIdExternalIds404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdExternalIdsQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>
    > = ({signal}) => getPersonPersonIdExternalIds(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdExternalIdsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>
>
export type GetPersonPersonIdExternalIdsQueryError = ErrorType<
    GetPersonPersonIdExternalIds401 | GetPersonPersonIdExternalIds404
>

/**
 * @summary Get External IDs
 */
export const useGetPersonPersonIdExternalIds = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>,
    TError = ErrorType<
        GetPersonPersonIdExternalIds401 | GetPersonPersonIdExternalIds404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdExternalIds>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdExternalIdsQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the movie and TV credits together in a single response.
 * @summary Get Combined Credits
 */
export const getPersonPersonIdCombinedCredits = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdCombinedCredits200>({
        url: `/person/${personId}/combined_credits`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdCombinedCreditsQueryKey = (
    personId: number,
) => {
    return [`/person/${personId}/combined_credits`] as const
}

export const getGetPersonPersonIdCombinedCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>,
    TError = ErrorType<
        | GetPersonPersonIdCombinedCredits401
        | GetPersonPersonIdCombinedCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdCombinedCreditsQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>
    > = ({signal}) => getPersonPersonIdCombinedCredits(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdCombinedCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>
>
export type GetPersonPersonIdCombinedCreditsQueryError = ErrorType<
    GetPersonPersonIdCombinedCredits401 | GetPersonPersonIdCombinedCredits404
>

/**
 * @summary Get Combined Credits
 */
export const useGetPersonPersonIdCombinedCredits = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>,
    TError = ErrorType<
        | GetPersonPersonIdCombinedCredits401
        | GetPersonPersonIdCombinedCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdCombinedCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdCombinedCreditsQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the changes for a person. By default only the last 24 hours are returned.

You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
 * @summary Get Changes
 */
export const getPersonPersonIdChanges = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdChanges200>({
        url: `/person/${personId}/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdChangesQueryKey = (personId: number) => {
    return [`/person/${personId}/changes`] as const
}

export const getGetPersonPersonIdChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdChanges>>,
    TError = ErrorType<
        GetPersonPersonIdChanges401 | GetPersonPersonIdChanges404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdChanges>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetPersonPersonIdChangesQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdChanges>>
    > = ({signal}) => getPersonPersonIdChanges(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdChanges>>
>
export type GetPersonPersonIdChangesQueryError = ErrorType<
    GetPersonPersonIdChanges401 | GetPersonPersonIdChanges404
>

/**
 * @summary Get Changes
 */
export const useGetPersonPersonIdChanges = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdChanges>>,
    TError = ErrorType<
        GetPersonPersonIdChanges401 | GetPersonPersonIdChanges404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdChanges>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdChangesQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the TV show credits for a person.

You can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).
 * @summary Get TV Credits
 */
export const getPersonPersonIdTvCredits = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdTvCredits200>({
        url: `/person/${personId}/tv_credits`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdTvCreditsQueryKey = (personId: number) => {
    return [`/person/${personId}/tv_credits`] as const
}

export const getGetPersonPersonIdTvCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>,
    TError = ErrorType<
        GetPersonPersonIdTvCredits401 | GetPersonPersonIdTvCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdTvCreditsQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>
    > = ({signal}) => getPersonPersonIdTvCredits(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdTvCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>
>
export type GetPersonPersonIdTvCreditsQueryError = ErrorType<
    GetPersonPersonIdTvCredits401 | GetPersonPersonIdTvCredits404
>

/**
 * @summary Get TV Credits
 */
export const useGetPersonPersonIdTvCredits = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>,
    TError = ErrorType<
        GetPersonPersonIdTvCredits401 | GetPersonPersonIdTvCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTvCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdTvCreditsQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the movie credits for a person.
 * @summary Get Movie Credits
 */
export const getPersonPersonIdMovieCredits = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdMovieCredits200>({
        url: `/person/${personId}/movie_credits`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdMovieCreditsQueryKey = (personId: number) => {
    return [`/person/${personId}/movie_credits`] as const
}

export const getGetPersonPersonIdMovieCreditsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>,
    TError = ErrorType<
        GetPersonPersonIdMovieCredits401 | GetPersonPersonIdMovieCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdMovieCreditsQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>
    > = ({signal}) => getPersonPersonIdMovieCredits(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdMovieCreditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>
>
export type GetPersonPersonIdMovieCreditsQueryError = ErrorType<
    GetPersonPersonIdMovieCredits401 | GetPersonPersonIdMovieCredits404
>

/**
 * @summary Get Movie Credits
 */
export const useGetPersonPersonIdMovieCredits = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>,
    TError = ErrorType<
        GetPersonPersonIdMovieCredits401 | GetPersonPersonIdMovieCredits404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdMovieCredits>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdMovieCreditsQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of translations that have been created for a person.
 * @summary Get Translations
 */
export const getPersonPersonIdTranslations = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdTranslations200>({
        url: `/person/${personId}/translations`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdTranslationsQueryKey = (personId: number) => {
    return [`/person/${personId}/translations`] as const
}

export const getGetPersonPersonIdTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTranslations>>,
    TError = ErrorType<
        GetPersonPersonIdTranslations401 | GetPersonPersonIdTranslations404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTranslations>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdTranslationsQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdTranslations>>
    > = ({signal}) => getPersonPersonIdTranslations(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdTranslations>>
>
export type GetPersonPersonIdTranslationsQueryError = ErrorType<
    GetPersonPersonIdTranslations401 | GetPersonPersonIdTranslations404
>

/**
 * @summary Get Translations
 */
export const useGetPersonPersonIdTranslations = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTranslations>>,
    TError = ErrorType<
        GetPersonPersonIdTranslations401 | GetPersonPersonIdTranslations404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTranslations>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdTranslationsQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images that this person has been tagged in.
 * @summary Get Tagged Images
 */
export const getPersonPersonIdTaggedImages = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdTaggedImages200>({
        url: `/person/${personId}/tagged_images`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdTaggedImagesQueryKey = (personId: number) => {
    return [`/person/${personId}/tagged_images`] as const
}

export const getGetPersonPersonIdTaggedImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>,
    TError = ErrorType<
        GetPersonPersonIdTaggedImages401 | GetPersonPersonIdTaggedImages404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetPersonPersonIdTaggedImagesQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>
    > = ({signal}) => getPersonPersonIdTaggedImages(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdTaggedImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>
>
export type GetPersonPersonIdTaggedImagesQueryError = ErrorType<
    GetPersonPersonIdTaggedImages401 | GetPersonPersonIdTaggedImages404
>

/**
 * @summary Get Tagged Images
 */
export const useGetPersonPersonIdTaggedImages = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>,
    TError = ErrorType<
        GetPersonPersonIdTaggedImages401 | GetPersonPersonIdTaggedImages404
    >,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdTaggedImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdTaggedImagesQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images for a person.
 * @summary Get Images
 */
export const getPersonPersonIdImages = (
    personId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetPersonPersonIdImages200>({
        url: `/person/${personId}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPersonIdImagesQueryKey = (personId: number) => {
    return [`/person/${personId}/images`] as const
}

export const getGetPersonPersonIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdImages>>,
    TError = ErrorType<GetPersonPersonIdImages401 | GetPersonPersonIdImages404>,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetPersonPersonIdImagesQueryKey(personId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPersonIdImages>>
    > = ({signal}) => getPersonPersonIdImages(personId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!personId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPersonIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPersonIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPersonIdImages>>
>
export type GetPersonPersonIdImagesQueryError = ErrorType<
    GetPersonPersonIdImages401 | GetPersonPersonIdImages404
>

/**
 * @summary Get Images
 */
export const useGetPersonPersonIdImages = <
    TData = Awaited<ReturnType<typeof getPersonPersonIdImages>>,
    TError = ErrorType<GetPersonPersonIdImages401 | GetPersonPersonIdImages404>,
>(
    personId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getPersonPersonIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPersonIdImagesQueryOptions(
        personId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the most newly created person. This is a live response and will continuously change.
 * @summary Get Latest
 */
export const getPersonLatest = (signal?: AbortSignal) => {
    return TMDBInstance<GetPersonLatest200>({
        url: `/person/latest`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonLatestQueryKey = () => {
    return [`/person/latest`] as const
}

export const getGetPersonLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonLatest>>,
    TError = ErrorType<GetPersonLatest401 | GetPersonLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonLatest>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPersonLatestQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonLatest>>
    > = ({signal}) => getPersonLatest(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonLatest>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonLatest>>
>
export type GetPersonLatestQueryError = ErrorType<
    GetPersonLatest401 | GetPersonLatest404
>

/**
 * @summary Get Latest
 */
export const useGetPersonLatest = <
    TData = Awaited<ReturnType<typeof getPersonLatest>>,
    TError = ErrorType<GetPersonLatest401 | GetPersonLatest404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonLatest>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonLatestQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a list of all of the person ids that have been changed in the past 24 hours.

You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
 * @summary Get Person Change List
 */
export const getPersonChanges = (signal?: AbortSignal) => {
    return TMDBInstance<GetPersonChanges200>({
        url: `/person/changes`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonChangesQueryKey = () => {
    return [`/person/changes`] as const
}

export const getGetPersonChangesQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonChanges>>,
    TError = ErrorType<GetPersonChanges401 | GetPersonChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonChanges>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPersonChangesQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonChanges>>
    > = ({signal}) => getPersonChanges(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonChanges>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonChangesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonChanges>>
>
export type GetPersonChangesQueryError = ErrorType<
    GetPersonChanges401 | GetPersonChanges404
>

/**
 * @summary Get Person Change List
 */
export const useGetPersonChanges = <
    TData = Awaited<ReturnType<typeof getPersonChanges>>,
    TError = ErrorType<GetPersonChanges401 | GetPersonChanges404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonChanges>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonChangesQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of popular people on TMDB. This list updates daily.
 * @summary Get Popular
 */
export const getPersonPopular = (signal?: AbortSignal) => {
    return TMDBInstance<GetPersonPopular200>({
        url: `/person/popular`,
        method: 'GET',
        signal,
    })
}

export const getGetPersonPopularQueryKey = () => {
    return [`/person/popular`] as const
}

export const getGetPersonPopularQueryOptions = <
    TData = Awaited<ReturnType<typeof getPersonPopular>>,
    TError = ErrorType<GetPersonPopular401 | GetPersonPopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonPopular>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPersonPopularQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getPersonPopular>>
    > = ({signal}) => getPersonPopular(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getPersonPopular>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetPersonPopularQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPersonPopular>>
>
export type GetPersonPopularQueryError = ErrorType<
    GetPersonPopular401 | GetPersonPopular404
>

/**
 * @summary Get Popular
 */
export const useGetPersonPopular = <
    TData = Awaited<ReturnType<typeof getPersonPopular>>,
    TError = ErrorType<GetPersonPopular401 | GetPersonPopular404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getPersonPopular>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetPersonPopularQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get Details
 */
export const getKeywordKeywordId = (
    keywordId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetKeywordKeywordId200>({
        url: `/keyword/${keywordId}`,
        method: 'GET',
        signal,
    })
}

export const getGetKeywordKeywordIdQueryKey = (keywordId: number) => {
    return [`/keyword/${keywordId}`] as const
}

export const getGetKeywordKeywordIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getKeywordKeywordId>>,
    TError = ErrorType<GetKeywordKeywordId401 | GetKeywordKeywordId404>,
>(
    keywordId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getKeywordKeywordId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetKeywordKeywordIdQueryKey(keywordId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getKeywordKeywordId>>
    > = ({signal}) => getKeywordKeywordId(keywordId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!keywordId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordKeywordId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetKeywordKeywordIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getKeywordKeywordId>>
>
export type GetKeywordKeywordIdQueryError = ErrorType<
    GetKeywordKeywordId401 | GetKeywordKeywordId404
>

/**
 * @summary Get Details
 */
export const useGetKeywordKeywordId = <
    TData = Awaited<ReturnType<typeof getKeywordKeywordId>>,
    TError = ErrorType<GetKeywordKeywordId401 | GetKeywordKeywordId404>,
>(
    keywordId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getKeywordKeywordId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetKeywordKeywordIdQueryOptions(keywordId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the movies that belong to a keyword.

We **highly recommend** using [movie discover](#endpoint:p5NyoR7dM842S8G9j) instead of this method as it is much more flexible.
 * @summary Get Movies
 */
export const getKeywordKeywordIdMovies = (
    keywordId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetKeywordKeywordIdMovies200>({
        url: `/keyword/${keywordId}/movies`,
        method: 'GET',
        signal,
    })
}

export const getGetKeywordKeywordIdMoviesQueryKey = (keywordId: number) => {
    return [`/keyword/${keywordId}/movies`] as const
}

export const getGetKeywordKeywordIdMoviesQueryOptions = <
    TData = Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>,
    TError = ErrorType<
        GetKeywordKeywordIdMovies401 | GetKeywordKeywordIdMovies404
    >,
>(
    keywordId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetKeywordKeywordIdMoviesQueryKey(keywordId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>
    > = ({signal}) => getKeywordKeywordIdMovies(keywordId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!keywordId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetKeywordKeywordIdMoviesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>
>
export type GetKeywordKeywordIdMoviesQueryError = ErrorType<
    GetKeywordKeywordIdMovies401 | GetKeywordKeywordIdMovies404
>

/**
 * @summary Get Movies
 */
export const useGetKeywordKeywordIdMovies = <
    TData = Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>,
    TError = ErrorType<
        GetKeywordKeywordIdMovies401 | GetKeywordKeywordIdMovies404
    >,
>(
    keywordId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getKeywordKeywordIdMovies>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetKeywordKeywordIdMoviesQueryOptions(
        keywordId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the details of a network.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| November 14, 2020 | The `logo_path` has been added to the default response. |
 * @summary Get Details
 */
export const getNetworkNetworkId = (
    networkId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetNetworkNetworkId200>({
        url: `/network/${networkId}`,
        method: 'GET',
        signal,
    })
}

export const getGetNetworkNetworkIdQueryKey = (networkId: number) => {
    return [`/network/${networkId}`] as const
}

export const getGetNetworkNetworkIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkId>>,
    TError = ErrorType<GetNetworkNetworkId401 | GetNetworkNetworkId404>,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetNetworkNetworkIdQueryKey(networkId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getNetworkNetworkId>>
    > = ({signal}) => getNetworkNetworkId(networkId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!networkId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getNetworkNetworkId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetNetworkNetworkIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getNetworkNetworkId>>
>
export type GetNetworkNetworkIdQueryError = ErrorType<
    GetNetworkNetworkId401 | GetNetworkNetworkId404
>

/**
 * @summary Get Details
 */
export const useGetNetworkNetworkId = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkId>>,
    TError = ErrorType<GetNetworkNetworkId401 | GetNetworkNetworkId404>,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetNetworkNetworkIdQueryOptions(networkId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the alternative names of a network.
 * @summary Get Alternative Names
 */
export const getNetworkNetworkIdAlternativeNames = (
    networkId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetNetworkNetworkIdAlternativeNames200>({
        url: `/network/${networkId}/alternative_names`,
        method: 'GET',
        signal,
    })
}

export const getGetNetworkNetworkIdAlternativeNamesQueryKey = (
    networkId: number,
) => {
    return [`/network/${networkId}/alternative_names`] as const
}

export const getGetNetworkNetworkIdAlternativeNamesQueryOptions = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>,
    TError = ErrorType<
        | GetNetworkNetworkIdAlternativeNames401
        | GetNetworkNetworkIdAlternativeNames404
    >,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetNetworkNetworkIdAlternativeNamesQueryKey(networkId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>
    > = ({signal}) => getNetworkNetworkIdAlternativeNames(networkId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!networkId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetNetworkNetworkIdAlternativeNamesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>
>
export type GetNetworkNetworkIdAlternativeNamesQueryError = ErrorType<
    | GetNetworkNetworkIdAlternativeNames401
    | GetNetworkNetworkIdAlternativeNames404
>

/**
 * @summary Get Alternative Names
 */
export const useGetNetworkNetworkIdAlternativeNames = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>,
    TError = ErrorType<
        | GetNetworkNetworkIdAlternativeNames401
        | GetNetworkNetworkIdAlternativeNames404
    >,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkIdAlternativeNames>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetNetworkNetworkIdAlternativeNamesQueryOptions(
        networkId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the TV network logos by id.

There are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.

For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
 * @summary Get Images
 */
export const getNetworkNetworkIdImages = (
    networkId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetNetworkNetworkIdImages200>({
        url: `/network/${networkId}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetNetworkNetworkIdImagesQueryKey = (networkId: number) => {
    return [`/network/${networkId}/images`] as const
}

export const getGetNetworkNetworkIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkIdImages>>,
    TError = ErrorType<
        GetNetworkNetworkIdImages401 | GetNetworkNetworkIdImages404
    >,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetNetworkNetworkIdImagesQueryKey(networkId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getNetworkNetworkIdImages>>
    > = ({signal}) => getNetworkNetworkIdImages(networkId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!networkId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getNetworkNetworkIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetNetworkNetworkIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getNetworkNetworkIdImages>>
>
export type GetNetworkNetworkIdImagesQueryError = ErrorType<
    GetNetworkNetworkIdImages401 | GetNetworkNetworkIdImages404
>

/**
 * @summary Get Images
 */
export const useGetNetworkNetworkIdImages = <
    TData = Awaited<ReturnType<typeof getNetworkNetworkIdImages>>,
    TError = ErrorType<
        GetNetworkNetworkIdImages401 | GetNetworkNetworkIdImages404
    >,
>(
    networkId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getNetworkNetworkIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetNetworkNetworkIdImagesQueryOptions(
        networkId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get an up to date list of the officially supported movie certifications on TMDB.
 * @summary Get Movie Certifications
 */
export const getCertificationMovieList = (signal?: AbortSignal) => {
    return TMDBInstance<GetCertificationMovieList200>({
        url: `/certification/movie/list`,
        method: 'GET',
        signal,
    })
}

export const getGetCertificationMovieListQueryKey = () => {
    return [`/certification/movie/list`] as const
}

export const getGetCertificationMovieListQueryOptions = <
    TData = Awaited<ReturnType<typeof getCertificationMovieList>>,
    TError = ErrorType<
        GetCertificationMovieList401 | GetCertificationMovieList404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getCertificationMovieList>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetCertificationMovieListQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCertificationMovieList>>
    > = ({signal}) => getCertificationMovieList(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getCertificationMovieList>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCertificationMovieListQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCertificationMovieList>>
>
export type GetCertificationMovieListQueryError = ErrorType<
    GetCertificationMovieList401 | GetCertificationMovieList404
>

/**
 * @summary Get Movie Certifications
 */
export const useGetCertificationMovieList = <
    TData = Awaited<ReturnType<typeof getCertificationMovieList>>,
    TError = ErrorType<
        GetCertificationMovieList401 | GetCertificationMovieList404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getCertificationMovieList>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCertificationMovieListQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get an up to date list of the officially supported TV show certifications on TMDB.
 * @summary Get TV Certifications
 */
export const getCertificationTvList = (signal?: AbortSignal) => {
    return TMDBInstance<GetCertificationTvList200>({
        url: `/certification/tv/list`,
        method: 'GET',
        signal,
    })
}

export const getGetCertificationTvListQueryKey = () => {
    return [`/certification/tv/list`] as const
}

export const getGetCertificationTvListQueryOptions = <
    TData = Awaited<ReturnType<typeof getCertificationTvList>>,
    TError = ErrorType<GetCertificationTvList401 | GetCertificationTvList404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getCertificationTvList>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetCertificationTvListQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCertificationTvList>>
    > = ({signal}) => getCertificationTvList(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getCertificationTvList>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCertificationTvListQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCertificationTvList>>
>
export type GetCertificationTvListQueryError = ErrorType<
    GetCertificationTvList401 | GetCertificationTvList404
>

/**
 * @summary Get TV Certifications
 */
export const useGetCertificationTvList = <
    TData = Awaited<ReturnType<typeof getCertificationTvList>>,
    TError = ErrorType<GetCertificationTvList401 | GetCertificationTvList404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getCertificationTvList>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCertificationTvListQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Returns a list of all of the countries we have watch provider (OTT/streaming) data for.
 * @summary Get Available Regions
 */
export const getWatchProvidersRegions = (signal?: AbortSignal) => {
    return TMDBInstance<GetWatchProvidersRegions200>({
        url: `/watch/providers/regions`,
        method: 'GET',
        signal,
    })
}

export const getGetWatchProvidersRegionsQueryKey = () => {
    return [`/watch/providers/regions`] as const
}

export const getGetWatchProvidersRegionsQueryOptions = <
    TData = Awaited<ReturnType<typeof getWatchProvidersRegions>>,
    TError = ErrorType<
        GetWatchProvidersRegions401 | GetWatchProvidersRegions404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getWatchProvidersRegions>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetWatchProvidersRegionsQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getWatchProvidersRegions>>
    > = ({signal}) => getWatchProvidersRegions(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getWatchProvidersRegions>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetWatchProvidersRegionsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getWatchProvidersRegions>>
>
export type GetWatchProvidersRegionsQueryError = ErrorType<
    GetWatchProvidersRegions401 | GetWatchProvidersRegions404
>

/**
 * @summary Get Available Regions
 */
export const useGetWatchProvidersRegions = <
    TData = Awaited<ReturnType<typeof getWatchProvidersRegions>>,
    TError = ErrorType<
        GetWatchProvidersRegions401 | GetWatchProvidersRegions404
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getWatchProvidersRegions>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetWatchProvidersRegionsQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Returns a list of the watch provider (OTT/streaming) data we have available for TV series. You can specify a `watch_region` param if you want to further filter the list by country.
 * @summary Get TV Providers
 */
export const getWatchProvidersTv = (
    params?: GetWatchProvidersTvParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetWatchProvidersTv200>({
        url: `/watch/providers/tv`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetWatchProvidersTvQueryKey = (
    params?: GetWatchProvidersTvParams,
) => {
    return [`/watch/providers/tv`, ...(params ? [params] : [])] as const
}

export const getGetWatchProvidersTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getWatchProvidersTv>>,
    TError = ErrorType<GetWatchProvidersTv401 | GetWatchProvidersTv404>,
>(
    params?: GetWatchProvidersTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getWatchProvidersTv>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetWatchProvidersTvQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getWatchProvidersTv>>
    > = ({signal}) => getWatchProvidersTv(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getWatchProvidersTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetWatchProvidersTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getWatchProvidersTv>>
>
export type GetWatchProvidersTvQueryError = ErrorType<
    GetWatchProvidersTv401 | GetWatchProvidersTv404
>

/**
 * @summary Get TV Providers
 */
export const useGetWatchProvidersTv = <
    TData = Awaited<ReturnType<typeof getWatchProvidersTv>>,
    TError = ErrorType<GetWatchProvidersTv401 | GetWatchProvidersTv404>,
>(
    params?: GetWatchProvidersTvParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getWatchProvidersTv>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetWatchProvidersTvQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Returns a list of the watch provider (OTT/streaming) data we have available for movies. You can specify a `watch_region` param if you want to further filter the list by country.
 * @summary Get Movie Providers
 */
export const getWatchProvidersMovie = (
    params?: GetWatchProvidersMovieParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetWatchProvidersMovie200>({
        url: `/watch/providers/movie`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetWatchProvidersMovieQueryKey = (
    params?: GetWatchProvidersMovieParams,
) => {
    return [`/watch/providers/movie`, ...(params ? [params] : [])] as const
}

export const getGetWatchProvidersMovieQueryOptions = <
    TData = Awaited<ReturnType<typeof getWatchProvidersMovie>>,
    TError = ErrorType<GetWatchProvidersMovie401 | GetWatchProvidersMovie404>,
>(
    params?: GetWatchProvidersMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getWatchProvidersMovie>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetWatchProvidersMovieQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getWatchProvidersMovie>>
    > = ({signal}) => getWatchProvidersMovie(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getWatchProvidersMovie>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetWatchProvidersMovieQueryResult = NonNullable<
    Awaited<ReturnType<typeof getWatchProvidersMovie>>
>
export type GetWatchProvidersMovieQueryError = ErrorType<
    GetWatchProvidersMovie401 | GetWatchProvidersMovie404
>

/**
 * @summary Get Movie Providers
 */
export const useGetWatchProvidersMovie = <
    TData = Awaited<ReturnType<typeof getWatchProvidersMovie>>,
    TError = ErrorType<GetWatchProvidersMovie401 | GetWatchProvidersMovie404>,
>(
    params?: GetWatchProvidersMovieParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getWatchProvidersMovie>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetWatchProvidersMovieQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the rated TV shows for a guest session.
 * @summary Get Rated TV Shows
 */
export const getGuestSessionGuestSessionIdRatedTv = (
    guestSessionId: string,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetGuestSessionGuestSessionIdRatedTv200>({
        url: `/guest_session/${guestSessionId}/rated/tv`,
        method: 'GET',
        signal,
    })
}

export const getGetGuestSessionGuestSessionIdRatedTvQueryKey = (
    guestSessionId: string,
) => {
    return [`/guest_session/${guestSessionId}/rated/tv`] as const
}

export const getGetGuestSessionGuestSessionIdRatedTvQueryOptions = <
    TData = Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>>,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedTv401
        | GetGuestSessionGuestSessionIdRatedTv404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetGuestSessionGuestSessionIdRatedTvQueryKey(guestSessionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>>
    > = ({signal}) =>
        getGuestSessionGuestSessionIdRatedTv(guestSessionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!guestSessionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetGuestSessionGuestSessionIdRatedTvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>>
>
export type GetGuestSessionGuestSessionIdRatedTvQueryError = ErrorType<
    | GetGuestSessionGuestSessionIdRatedTv401
    | GetGuestSessionGuestSessionIdRatedTv404
>

/**
 * @summary Get Rated TV Shows
 */
export const useGetGuestSessionGuestSessionIdRatedTv = <
    TData = Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>>,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedTv401
        | GetGuestSessionGuestSessionIdRatedTv404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getGuestSessionGuestSessionIdRatedTv>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetGuestSessionGuestSessionIdRatedTvQueryOptions(
        guestSessionId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the rated TV episodes for a guest session.
 * @summary Get Rated TV Episodes
 */
export const getGuestSessionGuestSessionIdRatedTvEpisodes = (
    guestSessionId: string,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetGuestSessionGuestSessionIdRatedTvEpisodes200>({
        url: `/guest_session/${guestSessionId}/rated/tv/episodes`,
        method: 'GET',
        signal,
    })
}

export const getGetGuestSessionGuestSessionIdRatedTvEpisodesQueryKey = (
    guestSessionId: string,
) => {
    return [`/guest_session/${guestSessionId}/rated/tv/episodes`] as const
}

export const getGetGuestSessionGuestSessionIdRatedTvEpisodesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getGuestSessionGuestSessionIdRatedTvEpisodes>
    >,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedTvEpisodes401
        | GetGuestSessionGuestSessionIdRatedTvEpisodes404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getGuestSessionGuestSessionIdRatedTvEpisodes
                    >
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetGuestSessionGuestSessionIdRatedTvEpisodesQueryKey(guestSessionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTvEpisodes>>
    > = ({signal}) =>
        getGuestSessionGuestSessionIdRatedTvEpisodes(guestSessionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!guestSessionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<
            ReturnType<typeof getGuestSessionGuestSessionIdRatedTvEpisodes>
        >,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetGuestSessionGuestSessionIdRatedTvEpisodesQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedTvEpisodes>>
    >
export type GetGuestSessionGuestSessionIdRatedTvEpisodesQueryError = ErrorType<
    | GetGuestSessionGuestSessionIdRatedTvEpisodes401
    | GetGuestSessionGuestSessionIdRatedTvEpisodes404
>

/**
 * @summary Get Rated TV Episodes
 */
export const useGetGuestSessionGuestSessionIdRatedTvEpisodes = <
    TData = Awaited<
        ReturnType<typeof getGuestSessionGuestSessionIdRatedTvEpisodes>
    >,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedTvEpisodes401
        | GetGuestSessionGuestSessionIdRatedTvEpisodes404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof getGuestSessionGuestSessionIdRatedTvEpisodes
                    >
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetGuestSessionGuestSessionIdRatedTvEpisodesQueryOptions(
            guestSessionId,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the rated movies for a guest session.
 * @summary Get Rated Movies
 */
export const getGuestSessionGuestSessionIdRatedMovies = (
    guestSessionId: string,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetGuestSessionGuestSessionIdRatedMovies200>({
        url: `/guest_session/${guestSessionId}/rated/movies`,
        method: 'GET',
        signal,
    })
}

export const getGetGuestSessionGuestSessionIdRatedMoviesQueryKey = (
    guestSessionId: string,
) => {
    return [`/guest_session/${guestSessionId}/rated/movies`] as const
}

export const getGetGuestSessionGuestSessionIdRatedMoviesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>
    >,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedMovies401
        | GetGuestSessionGuestSessionIdRatedMovies404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetGuestSessionGuestSessionIdRatedMoviesQueryKey(guestSessionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>>
    > = ({signal}) =>
        getGuestSessionGuestSessionIdRatedMovies(guestSessionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!guestSessionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetGuestSessionGuestSessionIdRatedMoviesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>>
>
export type GetGuestSessionGuestSessionIdRatedMoviesQueryError = ErrorType<
    | GetGuestSessionGuestSessionIdRatedMovies401
    | GetGuestSessionGuestSessionIdRatedMovies404
>

/**
 * @summary Get Rated Movies
 */
export const useGetGuestSessionGuestSessionIdRatedMovies = <
    TData = Awaited<
        ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>
    >,
    TError = ErrorType<
        | GetGuestSessionGuestSessionIdRatedMovies401
        | GetGuestSessionGuestSessionIdRatedMovies404
    >,
>(
    guestSessionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getGuestSessionGuestSessionIdRatedMovies>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions =
        getGetGuestSessionGuestSessionIdRatedMoviesQueryOptions(
            guestSessionId,
            options,
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get collection details by id.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |
 * @summary Get Details
 */
export const getCollectionCollectionId = (
    collectionId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCollectionCollectionId200>({
        url: `/collection/${collectionId}`,
        method: 'GET',
        signal,
    })
}

export const getGetCollectionCollectionIdQueryKey = (collectionId: number) => {
    return [`/collection/${collectionId}`] as const
}

export const getGetCollectionCollectionIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionId>>,
    TError = ErrorType<
        GetCollectionCollectionId401 | GetCollectionCollectionId404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCollectionCollectionId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetCollectionCollectionIdQueryKey(collectionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCollectionCollectionId>>
    > = ({signal}) => getCollectionCollectionId(collectionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!collectionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionCollectionId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCollectionCollectionIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCollectionCollectionId>>
>
export type GetCollectionCollectionIdQueryError = ErrorType<
    GetCollectionCollectionId401 | GetCollectionCollectionId404
>

/**
 * @summary Get Details
 */
export const useGetCollectionCollectionId = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionId>>,
    TError = ErrorType<
        GetCollectionCollectionId401 | GetCollectionCollectionId404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCollectionCollectionId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCollectionCollectionIdQueryOptions(
        collectionId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the images for a collection by id.
 * @summary Get Images
 */
export const getCollectionCollectionIdImages = (
    collectionId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCollectionCollectionIdImages200>({
        url: `/collection/${collectionId}/images`,
        method: 'GET',
        signal,
    })
}

export const getGetCollectionCollectionIdImagesQueryKey = (
    collectionId: number,
) => {
    return [`/collection/${collectionId}/images`] as const
}

export const getGetCollectionCollectionIdImagesQueryOptions = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionIdImages>>,
    TError = ErrorType<
        GetCollectionCollectionIdImages401 | GetCollectionCollectionIdImages404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCollectionCollectionIdImages>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetCollectionCollectionIdImagesQueryKey(collectionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCollectionCollectionIdImages>>
    > = ({signal}) => getCollectionCollectionIdImages(collectionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!collectionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionCollectionIdImages>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCollectionCollectionIdImagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCollectionCollectionIdImages>>
>
export type GetCollectionCollectionIdImagesQueryError = ErrorType<
    GetCollectionCollectionIdImages401 | GetCollectionCollectionIdImages404
>

/**
 * @summary Get Images
 */
export const useGetCollectionCollectionIdImages = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionIdImages>>,
    TError = ErrorType<
        GetCollectionCollectionIdImages401 | GetCollectionCollectionIdImages404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCollectionCollectionIdImages>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCollectionCollectionIdImagesQueryOptions(
        collectionId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list translations for a collection by id.
 * @summary Get Translations
 */
export const getCollectionCollectionIdTranslations = (
    collectionId: number,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetCollectionCollectionIdTranslations200>({
        url: `/collection/${collectionId}/translations`,
        method: 'GET',
        signal,
    })
}

export const getGetCollectionCollectionIdTranslationsQueryKey = (
    collectionId: number,
) => {
    return [`/collection/${collectionId}/translations`] as const
}

export const getGetCollectionCollectionIdTranslationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionIdTranslations>>,
    TError = ErrorType<
        | GetCollectionCollectionIdTranslations401
        | GetCollectionCollectionIdTranslations404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getCollectionCollectionIdTranslations>
                >,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetCollectionCollectionIdTranslationsQueryKey(collectionId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCollectionCollectionIdTranslations>>
    > = ({signal}) =>
        getCollectionCollectionIdTranslations(collectionId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!collectionId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionCollectionIdTranslations>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCollectionCollectionIdTranslationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCollectionCollectionIdTranslations>>
>
export type GetCollectionCollectionIdTranslationsQueryError = ErrorType<
    | GetCollectionCollectionIdTranslations401
    | GetCollectionCollectionIdTranslations404
>

/**
 * @summary Get Translations
 */
export const useGetCollectionCollectionIdTranslations = <
    TData = Awaited<ReturnType<typeof getCollectionCollectionIdTranslations>>,
    TError = ErrorType<
        | GetCollectionCollectionIdTranslations401
        | GetCollectionCollectionIdTranslations404
    >,
>(
    collectionId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getCollectionCollectionIdTranslations>
                >,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCollectionCollectionIdTranslationsQueryOptions(
        collectionId,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of official genres for movies.
 * @summary Get Movie List
 */
export const getGenreMovieList = (
    params?: GetGenreMovieListParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetGenreMovieList200>({
        url: `/genre/movie/list`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetGenreMovieListQueryKey = (
    params?: GetGenreMovieListParams,
) => {
    return [`/genre/movie/list`, ...(params ? [params] : [])] as const
}

export const getGetGenreMovieListQueryOptions = <
    TData = Awaited<ReturnType<typeof getGenreMovieList>>,
    TError = ErrorType<GetGenreMovieList401 | GetGenreMovieList404>,
>(
    params?: GetGenreMovieListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getGenreMovieList>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetGenreMovieListQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGenreMovieList>>
    > = ({signal}) => getGenreMovieList(params, signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getGenreMovieList>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetGenreMovieListQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGenreMovieList>>
>
export type GetGenreMovieListQueryError = ErrorType<
    GetGenreMovieList401 | GetGenreMovieList404
>

/**
 * @summary Get Movie List
 */
export const useGetGenreMovieList = <
    TData = Awaited<ReturnType<typeof getGenreMovieList>>,
    TError = ErrorType<GetGenreMovieList401 | GetGenreMovieList404>,
>(
    params?: GetGenreMovieListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getGenreMovieList>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetGenreMovieListQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the list of official genres for TV shows.
 * @summary Get TV List
 */
export const getGenreTvList = (signal?: AbortSignal) => {
    return TMDBInstance<GetGenreTvList200>({
        url: `/genre/tv/list`,
        method: 'GET',
        signal,
    })
}

export const getGetGenreTvListQueryKey = () => {
    return [`/genre/tv/list`] as const
}

export const getGetGenreTvListQueryOptions = <
    TData = Awaited<ReturnType<typeof getGenreTvList>>,
    TError = ErrorType<GetGenreTvList401 | GetGenreTvList404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getGenreTvList>>,
            TError,
            TData
        >
    >
}) => {
    const {query: queryOptions} = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGenreTvListQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGenreTvList>>
    > = ({signal}) => getGenreTvList(signal)

    return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
        Awaited<ReturnType<typeof getGenreTvList>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetGenreTvListQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGenreTvList>>
>
export type GetGenreTvListQueryError = ErrorType<
    GetGenreTvList401 | GetGenreTvList404
>

/**
 * @summary Get TV List
 */
export const useGetGenreTvList = <
    TData = Awaited<ReturnType<typeof getGenreTvList>>,
    TError = ErrorType<GetGenreTvList401 | GetGenreTvList404>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getGenreTvList>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetGenreTvListQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.

#### Valid Media Types

| **Media Type** | **Description** |
| - | - |
| all | Include all movies, TV shows and people in the results as a global trending list. |
| movie | Show the trending movies in the results. |
| tv | Show the trending TV shows in the results. |
| person | Show the trending people in the results. |

#### Valid Time Windows

| **Time Window** | **Description** |
| - | - |
| day | View the trending list for the day. |
| week | View the trending list for the week. |
 * @summary Get Trending
 */
export const getTrendingMediaTypeTimeWindow = (
    mediaType: string,
    timeWindow: string,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetTrendingMediaTypeTimeWindow200>({
        url: `/trending/${mediaType}/${timeWindow}`,
        method: 'GET',
        signal,
    })
}

export const getGetTrendingMediaTypeTimeWindowQueryKey = (
    mediaType: string,
    timeWindow: string,
) => {
    return [`/trending/${mediaType}/${timeWindow}`] as const
}

export const getGetTrendingMediaTypeTimeWindowQueryOptions = <
    TData = Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>,
    TError = ErrorType<
        GetTrendingMediaTypeTimeWindow401 | GetTrendingMediaTypeTimeWindow404
    >,
>(
    mediaType: string,
    timeWindow: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetTrendingMediaTypeTimeWindowQueryKey(mediaType, timeWindow)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>
    > = ({signal}) =>
        getTrendingMediaTypeTimeWindow(mediaType, timeWindow, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(mediaType && timeWindow),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetTrendingMediaTypeTimeWindowQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>
>
export type GetTrendingMediaTypeTimeWindowQueryError = ErrorType<
    GetTrendingMediaTypeTimeWindow401 | GetTrendingMediaTypeTimeWindow404
>

/**
 * @summary Get Trending
 */
export const useGetTrendingMediaTypeTimeWindow = <
    TData = Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>,
    TError = ErrorType<
        GetTrendingMediaTypeTimeWindow401 | GetTrendingMediaTypeTimeWindow404
    >,
>(
    mediaType: string,
    timeWindow: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getTrendingMediaTypeTimeWindow>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetTrendingMediaTypeTimeWindowQueryOptions(
        mediaType,
        timeWindow,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Retrieve the details of a movie or TV show review.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| November 14, 2020 | A `author_details` field has been added to the default response, which includes an `avatar_path` and `rating` value. |
 * @summary Get Details
 */
export const getReviewReviewId = (reviewId: string, signal?: AbortSignal) => {
    return TMDBInstance<GetReviewReviewId200>({
        url: `/review/${reviewId}`,
        method: 'GET',
        signal,
    })
}

export const getGetReviewReviewIdQueryKey = (reviewId: string) => {
    return [`/review/${reviewId}`] as const
}

export const getGetReviewReviewIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getReviewReviewId>>,
    TError = ErrorType<GetReviewReviewId401 | GetReviewReviewId404>,
>(
    reviewId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getReviewReviewId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetReviewReviewIdQueryKey(reviewId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getReviewReviewId>>
    > = ({signal}) => getReviewReviewId(reviewId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!reviewId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getReviewReviewId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetReviewReviewIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getReviewReviewId>>
>
export type GetReviewReviewIdQueryError = ErrorType<
    GetReviewReviewId401 | GetReviewReviewId404
>

/**
 * @summary Get Details
 */
export const useGetReviewReviewId = <
    TData = Awaited<ReturnType<typeof getReviewReviewId>>,
    TError = ErrorType<GetReviewReviewId401 | GetReviewReviewId404>,
>(
    reviewId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getReviewReviewId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetReviewReviewIdQueryOptions(reviewId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Get a movie or TV credit details by id.

#### Recent Changes

| **Date** | **Change** |
| - | - |
| July 13, 2018 | Movie credits are now supported. |
 * @summary Get Details
 */
export const getCreditCreditId = (creditId: string, signal?: AbortSignal) => {
    return TMDBInstance<GetCreditCreditId200>({
        url: `/credit/${creditId}`,
        method: 'GET',
        signal,
    })
}

export const getGetCreditCreditIdQueryKey = (creditId: string) => {
    return [`/credit/${creditId}`] as const
}

export const getGetCreditCreditIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getCreditCreditId>>,
    TError = ErrorType<GetCreditCreditId401 | GetCreditCreditId404>,
>(
    creditId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCreditCreditId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetCreditCreditIdQueryKey(creditId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCreditCreditId>>
    > = ({signal}) => getCreditCreditId(creditId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!creditId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getCreditCreditId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetCreditCreditIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCreditCreditId>>
>
export type GetCreditCreditIdQueryError = ErrorType<
    GetCreditCreditId401 | GetCreditCreditId404
>

/**
 * @summary Get Details
 */
export const useGetCreditCreditId = <
    TData = Awaited<ReturnType<typeof getCreditCreditId>>,
    TError = ErrorType<GetCreditCreditId401 | GetCreditCreditId404>,
>(
    creditId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCreditCreditId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetCreditCreditIdQueryOptions(creditId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * The find method makes it easy to search for objects in our database by an external id.

This method will search all objects (movies, TV shows and people) and return the results in a single response.

The supported external sources for each object are as follows.

#### Media Databases

|              | Movies | TV Shows | TV Seasons | TV Episodes | People |
| ------------ | ------ | -------- | ---------- | ----------- | ------ |
| IMDb ID      | ✓      | ✓        | ✗          | ✓           | ✓      |
| TVDB ID      | ✗      | ✓        | ✓          | ✓           | ✗      |
| Freebase MID*| ✗      | ✓        | ✓          | ✓           | ✓      |
| Freebase ID* | ✗      | ✓        | ✓          | ✓           | ✓      |
| TVRage ID*   | ✗      | ✓        | ✓          | ✓           | ✓      |

#### Social IDs

|              | Movies | TV Shows | TV Seasons | TV Episodes | People |
| ------------ | ------ | -------- | ---------- | ----------- | ------ |
| Facebook     | ✓      | ✓        | ✗          | ✗           | ✓      |
| Instagram    | ✓      | ✓        | ✗          | ✗           | ✓      |
| Twitter      | ✓      | ✓        | ✗          | ✗           | ✓      |

*Defunct or no longer available as a service.
 * @summary Find by ID
 */
export const getFindExternalId = (
    externalId: string,
    params?: GetFindExternalIdParams,
    signal?: AbortSignal,
) => {
    return TMDBInstance<GetFindExternalId200>({
        url: `/find/${externalId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGetFindExternalIdQueryKey = (
    externalId: string,
    params?: GetFindExternalIdParams,
) => {
    return [`/find/${externalId}`, ...(params ? [params] : [])] as const
}

export const getGetFindExternalIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getFindExternalId>>,
    TError = ErrorType<GetFindExternalId401 | GetFindExternalId404>,
>(
    externalId: string,
    params?: GetFindExternalIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getFindExternalId>>,
                TError,
                TData
            >
        >
    },
) => {
    const {query: queryOptions} = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetFindExternalIdQueryKey(externalId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getFindExternalId>>
    > = ({signal}) => getFindExternalId(externalId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!externalId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getFindExternalId>>,
        TError,
        TData
    > & {queryKey: QueryKey}
}

export type GetFindExternalIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFindExternalId>>
>
export type GetFindExternalIdQueryError = ErrorType<
    GetFindExternalId401 | GetFindExternalId404
>

/**
 * @summary Find by ID
 */
export const useGetFindExternalId = <
    TData = Awaited<ReturnType<typeof getFindExternalId>>,
    TError = ErrorType<GetFindExternalId401 | GetFindExternalId404>,
>(
    externalId: string,
    params?: GetFindExternalIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getFindExternalId>>,
                TError,
                TData
            >
        >
    },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const queryOptions = getGetFindExternalIdQueryOptions(
        externalId,
        params,
        options,
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}
